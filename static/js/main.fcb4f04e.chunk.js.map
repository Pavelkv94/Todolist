{"version":3,"sources":["api/api.ts","reportWebVitals.ts","state/app-reducer.ts","utils/error-utils.ts","state/auth-reducer.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","components/AddItemForm/AddItemForm.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","components/EditableSpan/EditableSpan.tsx","Task.tsx","Todolist.tsx","TodolistsList.tsx","components/AppBar/AppBar.tsx","App.tsx","state/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StatuseesCode","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","delete","put","tasksAPI","taskId","taskTitile","model","authAPI","data","handleServerNetworkError","dispatch","message","setAppErrorAC","error","setAppStatusAC","status","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","actions","authReducer","reducer","isInitialized","setIsInitializedAC","appReducer","Alert","props","elevation","variant","ErrorSnackbar","useSelector","app","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","auth","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","length","onSubmit","res","resultCode","successs","messages","catch","err","resetForm","to","Grid","container","justify","handleSubmit","FormControl","FormLabel","href","target","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","FormControlLabel","control","Checkbox","Button","type","AddItemForm","React","memo","useState","setTitle","setError","addItem","trim","onChange","e","currentTarget","onKeyPress","charCode","helperText","disabled","entityStatus","size","mainItem","width","IconButton","onClick","removeTodolistAC","index","findIndex","tl","id","splice","addTodolistAC","unshift","todolist","filter","changeTodolistTitleAC","find","changeTodolistFilterAC","setTodolistAC","todos","map","changeTodolistEntityStatusAC","todolistsReducer","removeTaskAC","t","addTaskAC","task","todoListId","push","changeTaskStatusAC","newTasksArray","changeTaskTitleAC","setTasksAC","tasks","extraReducers","builder","addCase","forEach","tasksReducer","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","GreenCheckbox","withStyles","root","green","checked","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Delete","Todolist","useEffect","demo","thunk","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","paddingTop","TodolistsList","todolists","removeTasksTC","newTask","item","addTaskTC","changeStatus","getState","findTask","startDate","priority","description","deadline","updateTask","updateTaskStatusTC","newTitle","changeTaskTitleTC","changeTodolistTitleTC","addTodolist","newTodo","addTodolistTC","padding","justifyContent","spacing","allTodolistTasks","Paper","NewAppBar","background","borderRadius","border","height","boxShadow","minHeight","position","textTransform","AppBar","CustomNewAppBar","Toolbar","Typography","cursor","logoutHandler","right","fontWeight","fontSize","App","finally","bg","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fcb4f04e.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport { TodolistType } from '../App'\r\n\r\ntype ResponseType<T> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: T\r\n};\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n};\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n};\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n};\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n};\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n};\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: boolean\r\n};\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '22fb0358-8da6-4e56-907c-49cc186ecf5f'\r\n    }\r\n});\r\n\r\nexport const todolistAPI = {\r\n\r\n    getTodo() {\r\n        const promise = instance.get<Array<TodolistType>>(`todo-lists`)\r\n        return promise\r\n    },\r\n    createTodo(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', { title: title })\r\n        return promise\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        const promise = instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}`)\r\n        return promise\r\n\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        const promise = instance.put<ResponseType<{}>>(`todo-lists/${todolistId}`, { title: title })\r\n        return promise\r\n    },\r\n};\r\n\r\nexport const tasksAPI = {\r\n\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, { title: taskTitile });\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n};\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId: number }>>('auth/login', data);\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/login');\r\n    },\r\n    me() {\r\n        return instance.get<any>('auth/me');\r\n    }\r\n};\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Dispatch } from \"redux\"\r\nimport { authAPI } from \"../api/api\"\r\nimport { setIsLoggedInAC } from \"./auth-reducer\"\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n};\r\nexport enum StatuseesCode {\r\n    successs = 0,\r\n    failed = 1,\r\n    captcha = 10\r\n};\r\n\r\n//type InitialStateType = typeof initialState;\r\nconst slice = createSlice({\r\n    name: \"app\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC: (state, action: PayloadAction<{ status: RequestStatusType }>) => {\r\n            { state.status = action.payload.status }\r\n        },\r\n        setAppErrorAC: (state, action: PayloadAction<{ error: string | null }>) => {\r\n            { state.error = action.payload.error }\r\n        },\r\n        setIsInitializedAC: (state, action: PayloadAction<{ isInitialized: boolean }>) => {\r\n            { state.isInitialized = action.payload.isInitialized }\r\n        }\r\n    }\r\n})\r\nexport const { setAppErrorAC, setAppStatusAC, setIsInitializedAC } = slice.actions;\r\nexport const appReducer = slice.reducer;\r\n\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === StatuseesCode.successs) {\r\n            dispatch(setIsLoggedInAC({ value: true }));\r\n        } else {\r\n\r\n        }\r\n    }).finally(() => {\r\n        dispatch(slice.actions.setIsInitializedAC({ isInitialized: true }))\r\n    })\r\n};\r\n","import { Dispatch } from 'redux';\r\nimport { setAppErrorAC, setAppStatusAC } from \"../state/app-reducer\"\r\n\r\n\r\n// generic function\r\n// export const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n//     if (data.messages.length) {\r\n//         dispatch(setAppErrorAC(data.messages[0]))\r\n//     } else {\r\n//         dispatch(setAppErrorAC('Some error occurred'))\r\n//     }\r\n//     dispatch(setAppStatusAC('failed'))\r\n//  }\r\n\r\nexport const handleServerNetworkError = (dispatch: Dispatch, message: string) => {\r\n    dispatch(setAppErrorAC({ error: message }))\r\n    dispatch(setAppStatusAC({ status: 'failed' }))\r\n}\r\n\r\n//type ErrorsActionTypes = SetAppStatusType | SetAppErrorType","import { authAPI, LoginParamsType } from './../api/api';\r\nimport { Dispatch } from 'redux'\r\nimport { setAppStatusAC, StatuseesCode } from './app-reducer'\r\nimport { handleServerNetworkError } from '../utils/error-utils';\r\nimport { AxiosError } from 'axios';\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n};\r\n\r\nconst slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            { state.isLoggedIn = action.payload.value }\r\n        }\r\n    }\r\n})\r\nexport const setIsLoggedInAC = slice.actions.setIsLoggedInAC;\r\nexport const authReducer = slice.reducer;\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === StatuseesCode.successs) {\r\n                dispatch(slice.actions.setIsLoggedInAC({ value: true }));\r\n                dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n            } else {\r\n                handleServerNetworkError(dispatch, res.data.messages[0])\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n};\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === StatuseesCode.successs) {\r\n                dispatch(slice.actions.setIsLoggedInAC({ value: false }))\r\n                dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n            } else {\r\n                handleServerNetworkError(dispatch, res.data.messages[0])\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(dispatch, error.messages)\r\n        })\r\n};\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../state/store'\r\nimport { setAppErrorAC } from '../../state/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //так как компонента некотролируемая, а нам нужно ее связать со стейтом то используем useSelector\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch();\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        //setOpen(false)\r\n        dispatch(setAppErrorAC({ error: null }))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport { Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid } from '@material-ui/core'\r\nimport { useFormik } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loginTC } from '../../state/auth-reducer';\r\nimport { AppRootStateType } from '../../state/store';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\nexport const Login = () => {\r\n    const dispatch = useDispatch();\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required';\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'Invalid password (minimal 4 sybmols)';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'} />\r\n    } else {\r\n        return <Grid container justify=\"center\">\r\n            <Grid>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <FormLabel>\r\n                            <p>To log in get registered\r\n                                <a href={'https://social-network.samuraijs.com/'}\r\n                                    target={'_blank'}>here\r\n                                </a>\r\n                            </p>\r\n                            <p>or use common test account credentials:</p>\r\n                            <p>Email: free@samuraijs.com</p>\r\n                            <p>Password: free</p>\r\n                        </FormLabel>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('email')}\r\n                            />\r\n                            {formik.touched.email &&\r\n                                formik.errors.email ? <div style={{ color: 'red' }}>{formik.errors.email}</div> : null}\r\n                            <TextField\r\n                                label=\"Password\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('password')}\r\n                            />\r\n                            {formik.touched.password && formik.errors.password ? <div style={{ color: 'red' }}>{formik.errors.password}</div> : null}\r\n                            <FormControlLabel\r\n                                label={'Remember me'}\r\n                                control={<Checkbox\r\n                                    {...formik.getFieldProps('rememberMe ')}\r\n                                />}\r\n                            />\r\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n    }\r\n}","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport { IconButton, TextField } from '@material-ui/core';\r\nimport { AddBox } from '@material-ui/icons';\r\nimport { RequestStatusType } from '../../state/app-reducer';\r\nimport AddCircleTwoToneIcon from '@material-ui/icons/AddCircleTwoTone';\r\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    entityStatus?: RequestStatusType\r\n    mainItem?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div >\r\n        <TextField variant=\"outlined\"\r\n            error={!!error}\r\n            value={title}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            label=\"Title\"\r\n            helperText={error}\r\n            disabled={props.entityStatus === 'loading'}\r\n            size=\"small\"\r\n            style={props.mainItem ? { width: \"320px\" } : {}}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.entityStatus === 'loading'}>\r\n            <NoteAddIcon />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import { todolistAPI } from './../api/api';\r\nimport { Dispatch } from 'redux';\r\nimport { FilterValuesType, TodolistType } from '../App';\r\nimport { RequestStatusType, setAppStatusAC, StatuseesCode } from './app-reducer';\r\nimport { AxiosError } from 'axios';\r\nimport { handleServerNetworkError } from '../utils/error-utils';\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\n\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = [\r\n    /*{id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0},\r\n   {id: todolistId2, title: 'What to buy', filter: 'all', addedDate: '', order: 0}*/\r\n];\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n};\r\n\r\n\r\nconst slice = createSlice({\r\n    name: \"todolist\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{ todolistId: string }>) {\r\n            {\r\n                const index = state.findIndex(tl => tl.id === action.payload.todolistId);\r\n                if (index > -1) {\r\n                    state.splice(index, 1)\r\n                }\r\n            \r\n            }\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            { state.unshift({ ...action.payload.todolist, filter: 'all', entityStatus: 'idle' }) }\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n            {\r\n                const todolist = state.find(tl => tl.id === action.payload.id);\r\n                if (todolist) {\r\n                    // если нашёлся - изменим ему заголовок\r\n                    todolist.title = action.payload.title;\r\n                }\r\n            }\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            {\r\n                const todolist = state.find(tl => tl.id === action.payload.id);\r\n                if (todolist) {\r\n                    // если нашёлся - изменим ему заголовок\r\n                    todolist.filter = action.payload.filter;\r\n                }\r\n            }\r\n        },\r\n        setTodolistAC(state, action: PayloadAction<{ todos: Array<TodolistType> }>) {\r\n            {\r\n                return action.payload.todos.map((tl: any) => {\r\n                    return { ...tl, filter: 'all', entityStatus: 'idle' }\r\n                })\r\n            }\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, entityStatus: RequestStatusType }>) {\r\n            {\r\n                const todolist = state.find(tl => tl.id === action.payload.id);\r\n                if (todolist) {\r\n                    todolist.entityStatus = action.payload.entityStatus;\r\n                }\r\n            }\r\n        },\r\n    }\r\n})\r\nexport const { removeTodolistAC, addTodolistAC, changeTodolistTitleAC, changeTodolistFilterAC, setTodolistAC, changeTodolistEntityStatusAC } = slice.actions\r\n\r\nexport const todolistsReducer = slice.reducer;\r\n\r\n//todo THUNK CREATORS\r\nexport const setTodolistTC = () => (dispatch: Dispatch) => {\r\n\r\n    dispatch(setAppStatusAC({ status: 'loading' }))\r\n    // 1. Side Effect\r\n    todolistAPI.getTodo()\r\n        .then(res => {\r\n            let todos = res.data\r\n            // 2. Dispatch actions(thunk)\r\n            dispatch(setTodolistAC({ todos: todos }))\r\n            dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n        }).catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n};\r\n\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }))\r\n    todolistAPI.createTodo(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === StatuseesCode.successs) {\r\n                let newTodo = res.data.data.item\r\n                dispatch(addTodolistAC({ todolist: newTodo }))\r\n                dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n            } else {\r\n                handleServerNetworkError(dispatch, res.data.messages[0])\r\n            }\r\n        }).catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n};\r\n\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }))\r\n    dispatch(changeTodolistEntityStatusAC({ id: todolistId, entityStatus: 'loading' }))\r\n    todolistAPI.deleteTodo(todolistId)\r\n        .then((res) => {\r\n            dispatch(removeTodolistAC({ todolistId: todolistId }))\r\n            dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n        }).catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n};\r\n\r\nexport const changeTodolistTitleTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }))\r\n    todolistAPI.updateTodolist(todolistId, title)\r\n        .then((res) => {\r\n            dispatch(changeTodolistTitleAC({ id: todolistId, title: title }))\r\n            dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n        }).catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n};\r\n\r\n\r\n","import { UpdateTaskModelType, TaskStatuses } from './../api/api';\r\nimport { AppRootStateType } from './store';\r\nimport { addTodolistAC, removeTodolistAC, setTodolistAC } from './todolists-reducer';\r\nimport { TasksStateType } from '../App';\r\nimport { Dispatch } from 'redux';\r\nimport { tasksAPI, TaskType } from '../api/api';\r\nimport { setAppStatusAC, StatuseesCode } from './app-reducer';\r\nimport { AxiosError } from 'axios';\r\nimport { handleServerNetworkError } from '../utils/error-utils';\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\n\r\n\r\nconst initialState: TasksStateType = {\r\n\r\n\r\n    /*\"todolistId1\": [\r\n       { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n           startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n       { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\r\n           startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n       { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n           startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n   ],\r\n   \"todolistId2\": [\r\n       { id: \"1\", title: \"bread\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n           startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n       { id: \"2\", title: \"milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: '',\r\n           startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n       { id: \"3\", title: \"tea\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n           startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n   ]*/\r\n};\r\n\r\n\r\n\r\nconst slice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n            {\r\n                state[action.payload.todolistId] = state[action.payload.todolistId].filter(t => t.id !== action.payload.taskId);\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n            {\r\n                state[action.payload.task.todoListId].push(action.payload.task)\r\n            }\r\n        },\r\n        changeTaskStatusAC(state, action: PayloadAction<{ taskId: string, status: TaskStatuses, todolistId: string }>) {\r\n            {\r\n                let newTasksArray = state[action.payload.todolistId]\r\n                    .map(t => t.id === action.payload.taskId ? { ...t, status: action.payload.status } : t);\r\n                state[action.payload.todolistId] = newTasksArray;\r\n\r\n            }\r\n        },\r\n        changeTaskTitleAC(state, action: PayloadAction<{ taskId: string, title: string, todolistId: string }>) {\r\n            {\r\n                const newTasksArray = state[action.payload.todolistId]\r\n                    .map(t => t.id === action.payload.taskId ? { ...t, title: action.payload.title } : t);\r\n\r\n                state[action.payload.todolistId] = newTasksArray;\r\n\r\n            }\r\n        },\r\n        setTasksAC(state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) {\r\n            {\r\n                state[action.payload.todolistId] = action.payload.tasks\r\n            }\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.todolistId]\r\n        });\r\n        builder.addCase(setTodolistAC, (state, action) => {\r\n            action.payload.todos.forEach((tl) => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n    }\r\n})\r\nexport const { removeTaskAC, addTaskAC, changeTaskStatusAC, changeTaskTitleAC, setTasksAC } = slice.actions\r\n\r\nexport const tasksReducer = slice.reducer;\r\n\r\n\r\n\r\n//todo THUNK CREATORS\r\nexport const fetchTasksTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({ status: 'loading' }))\r\n        tasksAPI.getTasks(todolistId)\r\n            .then((res) => {\r\n                const tasks = res.data.items\r\n                dispatch(setTasksAC({ tasks: tasks, todolistId: todolistId }))\r\n                dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                handleServerNetworkError(dispatch, err.message)\r\n            })\r\n    }\r\n};\r\n\r\nexport const removeTasksTC = (todolistId: string, taskId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }))\r\n\r\n    tasksAPI.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            dispatch(removeTaskAC({ taskId: taskId, todolistId: todolistId }))\r\n            dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n        }).catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n};\r\n\r\nexport const addTaskTC = (todolistId: string, taskTitile: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }))\r\n    tasksAPI.createTask(todolistId, taskTitile)\r\n        .then((res) => {\r\n            if (res.data.resultCode === StatuseesCode.successs) {\r\n                let newTask = res.data.data.item;\r\n                dispatch(addTaskAC({ task: newTask }))\r\n                dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n            } else {\r\n                handleServerNetworkError(dispatch, res.data.messages[0])\r\n            }\r\n        }).catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n};\r\n\r\nexport const updateTaskStatusTC = (todolistId: string, taskId: string, status: TaskStatuses) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n    //обращаемся к стейту\r\n    let state = getState();\r\n    //получаем массив тасок\r\n    let allTasks = state.tasks;\r\n    //теперь нужно достать таски конкретного тудулиста\r\n    let tasksForCurrentTodolist = allTasks[todolistId];\r\n    //находим конкретную таску у которой меняем статус\r\n    let findTask = tasksForCurrentTodolist.find(t => t.id === taskId);\r\n    //todo первый способ: передаюттся лишние строки на сервер\r\n    //const newTask = { ...findTask, status: status }\r\n    //const model = newTask;\r\n\r\n    //todo для того чтобы не передавать лишие строки на сервер делаем так:\r\n    //условие обязательно\r\n    if (findTask) {\r\n        const model: UpdateTaskModelType = {\r\n            title: findTask.title,\r\n            status: status,\r\n            startDate: findTask.startDate,\r\n            priority: findTask.priority,\r\n            description: findTask.description,\r\n            deadline: findTask.deadline\r\n        }\r\n\r\n        tasksAPI.updateTask(todolistId, taskId, model as UpdateTaskModelType)\r\n            .then((res) => {\r\n                let updateTask = res.data.data.item.status\r\n                dispatch(changeTaskStatusAC({ taskId: taskId, status: updateTask, todolistId: todolistId }))\r\n            }).catch((err: AxiosError) => {\r\n                handleServerNetworkError(dispatch, err.message)\r\n            })\r\n    }\r\n\r\n};\r\n\r\nexport const changeTaskTitleTC = (todolistId: string, taskId: string, title: string) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }))\r\n    let findTask = getState().tasks[todolistId].find(t => t.id === taskId);\r\n    if (findTask) {\r\n        const model: UpdateTaskModelType = {\r\n            title: title,\r\n            status: findTask.status,\r\n            startDate: findTask.startDate,\r\n            priority: findTask.priority,\r\n            description: findTask.description,\r\n            deadline: findTask.deadline\r\n        }\r\n\r\n        tasksAPI.updateTask(todolistId, taskId, model as UpdateTaskModelType)\r\n            .then((res) => {\r\n                let title = res.data.data.item.title\r\n                dispatch(changeTaskTitleAC({ taskId: taskId, title: title, todolistId: todolistId }))\r\n                dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n            }).catch((err: AxiosError) => {\r\n                handleServerNetworkError(dispatch, err.message)\r\n            })\r\n    }\r\n};","import React, { ChangeEvent, useState } from 'react';\r\nimport { TextField } from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { IconButton } from '@material-ui/core'\r\nimport { EditableSpan } from './components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { TaskStatuses, TaskType } from './api/api'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { green } from '@material-ui/core/colors';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\r\n\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\n\r\n//checkbox\r\n\r\nconst GreenCheckbox = withStyles({\r\n    root: {\r\n        color: green[400],\r\n        '&$checked': {\r\n            color: green[600],\r\n        },\r\n    },\r\n    checked: {},\r\n})((props: CheckboxProps) => <Checkbox color=\"default\" {...props} />);\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <GreenCheckbox checked={props.task.status === TaskStatuses.Completed} onChange={onChangeHandler} name=\"checkedG\" />\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler} />\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete color=\"secondary\" />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from './components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from './components/EditableSpan/EditableSpan'\r\nimport { Button, IconButton } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { Task } from './Task'\r\nimport { FilterValuesType } from './App';\r\nimport { TaskStatuses, TaskType } from './api/api'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from './state/tasks-reducer'\r\nimport { RequestStatusType } from './state/app-reducer'\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n    demo?: boolean\r\n};\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (props.demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id]);\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    };\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle]);\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter]);\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter]);\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter]);\r\n\r\n\r\n    let tasksForTodolist = props.tasks;\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    };\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    };\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\r\n                <Delete />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} entityStatus={props.entityStatus} />\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                    removeTask={props.removeTask}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{ paddingTop: '10px' }}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                onClick={onAllClickHandler}\r\n                color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                onClick={onActiveClickHandler}\r\n                color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                onClick={onCompletedClickHandler}\r\n                color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div >\r\n});\r\n\r\n\r\n","import { Grid, Paper } from \"@material-ui/core\"\r\nimport { useCallback, useEffect } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { TaskStatuses } from \"./api/api\"\r\nimport { FilterValuesType, TasksStateType } from \"./App\"\r\nimport { AddItemForm } from \"./components/AddItemForm/AddItemForm\"\r\nimport { AppRootStateType } from \"./state/store\"\r\nimport { addTaskTC, changeTaskTitleTC, removeTasksTC, updateTaskStatusTC } from \"./state/tasks-reducer\"\r\nimport { addTodolistTC, changeTodolistFilterAC, changeTodolistTitleTC, removeTodolistTC, setTodolistTC, TodolistDomainType } from \"./state/todolists-reducer\"\r\nimport { Todolist } from \"./Todolist\"\r\nimport './App.css';\r\n\r\n\r\n//* demo - проверка для сторибука\r\ntype PropsType = {\r\n    demo?: boolean\r\n};\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({ demo = false }) => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn);\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = setTodolistTC()\r\n        dispatch(thunk)\r\n    }, []);\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists);\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    //todo TASKS FUNCTION\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(removeTasksTC(todolistId, id))\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(addTaskTC(todolistId, title))\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(updateTaskStatusTC(todolistId, id, status));\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n\r\n        dispatch(changeTaskTitleTC(todolistId, id, newTitle));\r\n    }, []);\r\n\r\n    //todo TODOLISTS FUNCTION\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({ id: todolistId, filter: value });\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        dispatch(removeTodolistTC(id));\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(changeTodolistTitleTC(id, title));\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title));\r\n    }, [dispatch]);\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'} />\r\n    } else {\r\n        return <>\r\n            <Grid container style={{ padding: \"20px\", justifyContent: \"center\" }} > \r\n                <div className=\"mainTitle\">Create New Todolist:</div>\r\n                <AddItemForm addItem={addTodolist} mainItem={true}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todolists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id];\r\n\r\n                        return <Grid item key={tl.id} >\r\n                            <Paper style={{ padding: \"15px\" }} className=\"todolist\">\r\n                                <Todolist\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    tasks={allTodolistTasks}\r\n                                    filter={tl.filter}\r\n                                    entityStatus={tl.entityStatus}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                    demo={demo}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    }\r\n};","import { AppBar, Button, Toolbar, Typography, withStyles } from \"@material-ui/core\";\r\nimport { AddItemForm } from \"../AddItemForm/AddItemForm\";\r\n\r\ntype NewAppBarType = {\r\n    isLoggedIn: boolean, logoutHandler: () => void\r\n}\r\n\r\nconst NewAppBar = withStyles({\r\n    root: {\r\n        background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n        borderRadius: 3,\r\n        border: 0,\r\n        color: 'white',\r\n        height: 48,\r\n        padding: '0 30px',\r\n        boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n        minHeight: '60px',\r\n        position: 'relative',\r\n    },\r\n    label: {\r\n        textTransform: 'capitalize',\r\n    },\r\n})(AppBar);\r\n\r\nexport function CustomNewAppBar(props: NewAppBarType) {\r\n    return <NewAppBar position=\"static\" >\r\n        <Toolbar>\r\n            <Typography variant=\"h4\" style={{cursor:\"default\"}}>\r\n                Todolist\r\n            </Typography>\r\n           \r\n            {props.isLoggedIn && <Button color=\"inherit\" onClick={props.logoutHandler} style={{ position: \"absolute\", right: \"10px\", fontWeight: \"bold\", fontSize: \"16px\" }}>Logout</Button>}\r\n\r\n        </Toolbar>\r\n    </NewAppBar>\r\n}\r\n\r\n\r\n","import './App.css';\r\nimport { Container, LinearProgress, CircularProgress } from '@material-ui/core';\r\nimport { Menu } from '@material-ui/icons';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from './state/store';\r\nimport { initializeAppTC, RequestStatusType } from './state/app-reducer';\r\nimport { ErrorSnackbar } from './components/ErrorSnackbar/ErrorSnackbar';\r\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\r\nimport { Login } from './features/Login/Login';\r\nimport { TodolistsList } from './TodolistsList';\r\nimport { TaskType } from './api/api';\r\nimport { useCallback, useEffect } from 'react';\r\nimport { logoutTC } from './state/auth-reducer';\r\nimport ParticlesBg from 'particles-bg'\r\nimport { CustomNewAppBar } from './components/AppBar/AppBar';\r\nimport { addTodolistTC } from './state/todolists-reducer';\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n};\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n};\r\n\r\n//* demo - проверка для сторибука\r\ntype PropsType = {\r\n    demo?: boolean\r\n};\r\n\r\nfunction App({ demo = false }: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized);\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n\r\n    }, []);\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    };\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{ position: 'fixed', top: '30%', textAlign: 'center', width: '100%' }}>\r\n            <CircularProgress />\r\n        </div>\r\n    };\r\n  \r\n    return (\r\n        <div className=\"App\">\r\n            <ParticlesBg type=\"polygon\" bg={true} />\r\n            <BrowserRouter>\r\n                <ErrorSnackbar />\r\n                <CustomNewAppBar isLoggedIn={isLoggedIn} logoutHandler={logoutHandler} />\r\n\r\n                {status === 'loading' && <LinearProgress color=\"secondary\" />}\r\n\r\n                <Container fixed>\r\n                    <Switch >\r\n                        <Route exact path={'/'} render={() => <TodolistsList demo={demo} />} />\r\n                        <Route path={'/login'} render={() => <Login />} />\r\n                        <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>} />\r\n                        <Redirect from={'*'} to={'/'} />\r\n                    </Switch>\r\n                </Container>\r\n            </BrowserRouter>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { tasksReducer } from './tasks-reducer';\r\nimport { todolistsReducer } from './todolists-reducer';\r\nimport { combineReducers } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { appReducer } from './app-reducer';\r\nimport { authReducer } from './auth-reducer';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n});\r\n\r\n// непосредственно создаём store\r\n//export const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n//ReduxToolKit\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) =>\r\n        getDefaultMiddleware()\r\n            .prepend(thunk)\r\n});\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './state/store';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}