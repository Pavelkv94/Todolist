{"version":3,"sources":["api/api.ts","reportWebVitals.ts","state/app-reducer.ts","utils/error-utils.ts","state/auth-reducer.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","components/AddItemForm/AddItemForm.tsx","state/tasks-reducer.ts","state/todolists-reducer.ts","components/EditableSpan/EditableSpan.tsx","Task.tsx","Todolist.tsx","TodolistsList.tsx","App.tsx","state/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StatuseesCode","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","delete","put","tasksAPI","taskId","taskTitile","model","authAPI","data","handleServerNetworkError","dispatch","message","setAppErrorAC","setAppStatusAC","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","error","isInitialized","Alert","props","elevation","variant","ErrorSnackbar","useSelector","state","app","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","auth","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","length","onSubmit","res","resultCode","successs","messages","catch","err","resetForm","to","Grid","container","justify","item","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","FormControlLabel","control","Checkbox","Button","AddItemForm","React","memo","console","log","useState","setTitle","setError","addItem","trim","onChange","e","currentTarget","onKeyPress","charCode","helperText","disabled","entityStatus","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","task","id","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Delete","Todolist","useEffect","demo","thunk","tasks","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","t","removeTodolist","map","paddingTop","TodolistsList","todos","setTodosAC","todolists","removeTaskAC","removeTasksTC","newTask","addTaskTC","changeStatus","getState","findTask","find","startDate","priority","description","deadline","updateTask","changeTaskStatusAC","updateTaskStatusTC","newTitle","changeTaskTitleAC","changeTaskTitleTC","action","removeTodolistAC","changeTodolistTitleAC","changeTodosTitleTC","addTodolist","newTodo","todolist","addTodosTC","padding","spacing","tl","allTodolistTasks","Paper","App","finally","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","stateCopy","forEach","newTasks","todoListId","todolistTasks","newTasksArray","copyState","store","createStore","applyMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.edce7f5b.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport { TodolistType } from '../App'\r\n\r\ntype ResponseType<T> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: T\r\n};\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n};\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n};\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n};\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n};\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n};\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: boolean\r\n};\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a75ca69e-11c9-4fb1-b265-ac7ff31550a1'\r\n    }\r\n});\r\n\r\nexport const todolistAPI = {\r\n\r\n    getTodo() {\r\n        const promise = instance.get<Array<TodolistType>>(`todo-lists`)\r\n        return promise\r\n    },\r\n    createTodo(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', { title: title })\r\n        return promise\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        const promise = instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}`)\r\n        return promise\r\n\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        const promise = instance.put<ResponseType<{}>>(`todo-lists/${todolistId}`, { title: title })\r\n        return promise\r\n    },\r\n};\r\n\r\nexport const tasksAPI = {\r\n\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, { title: taskTitile });\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n};\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId: number }>>('auth/login', data);\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/login');\r\n    },\r\n    me() {\r\n        return instance.get<any>('auth/me');\r\n    }\r\n};\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Dispatch } from \"redux\"\r\nimport { authAPI } from \"../api/api\"\r\nimport { setIsLoggedInAC } from \"./auth-reducer\"\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n};\r\nexport enum StatuseesCode {\r\n    successs = 0,\r\n    failed = 1,\r\n    captcha = 10\r\n};\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'App/SET-STATUS':\r\n            return { ...state, status: action.status }\r\n        case 'App/SET-ERROR':\r\n            return { ...state, error: action.error }\r\n        case 'App/SET-IS-INITIALIZED':\r\n            return { ...state, isInitialized: action.isInitialized }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n    return {\r\n        type: 'App/SET-STATUS',\r\n        status\r\n    } as const\r\n};\r\n\r\nexport const setAppErrorAC = (error: string | null) => {\r\n    return {\r\n        type: 'App/SET-ERROR',\r\n        error\r\n    } as const\r\n};\r\n\r\nexport const setIsInitializedAC = (isInitialized: boolean) => {\r\n    return {\r\n        type: 'App/SET-IS-INITIALIZED',\r\n        isInitialized\r\n    } as const\r\n};\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === StatuseesCode.successs) {\r\n            dispatch(setIsLoggedInAC(true));\r\n        } else {\r\n\r\n        }\r\n    }).finally(() => {\r\n        dispatch(setIsInitializedAC(true))\r\n    })\r\n};\r\n\r\nexport type SetAppErrorType = ReturnType<typeof setAppErrorAC>;\r\nexport type SetAppStatusType = ReturnType<typeof setAppStatusAC>;\r\nexport type SetIsInitializedType = ReturnType<typeof setIsInitializedAC>;\r\n\r\ntype ActionsType = SetAppStatusType | SetAppErrorType | SetIsInitializedType;\r\n\r\n","import { Dispatch } from 'redux';\r\nimport { setAppErrorAC, SetAppErrorType, setAppStatusAC, SetAppStatusType } from \"../state/app-reducer\"\r\n\r\n\r\n// generic function\r\n// export const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n//     if (data.messages.length) {\r\n//         dispatch(setAppErrorAC(data.messages[0]))\r\n//     } else {\r\n//         dispatch(setAppErrorAC('Some error occurred'))\r\n//     }\r\n//     dispatch(setAppStatusAC('failed'))\r\n//  }\r\n\r\nexport const handleServerNetworkError = (dispatch: Dispatch, message: string) => {\r\n    dispatch(setAppErrorAC(message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\n//type ErrorsActionTypes = SetAppStatusType | SetAppErrorType","import { authAPI, LoginParamsType } from './../api/api';\r\nimport { Dispatch } from 'redux'\r\nimport { SetAppErrorType, setAppStatusAC, SetAppStatusType, StatuseesCode } from './app-reducer'\r\nimport { handleServerNetworkError } from '../utils/error-utils';\r\nimport { AxiosError } from 'axios';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n};\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return { ...state, isLoggedIn: action.value }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({ type: 'login/SET-IS-LOGGED-IN', value } as const);\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === StatuseesCode.successs) {\r\n                dispatch(setIsLoggedInAC(true));\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerNetworkError(dispatch, res.data.messages[0])\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n};\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === StatuseesCode.successs) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerNetworkError(dispatch, res.data.messages[0])\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(dispatch, error.messages)\r\n        })\r\n};\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusType | SetAppErrorType;\r\n\r\n\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../state/store'\r\nimport { setAppErrorAC } from '../../state/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //так как компонента некотролируемая, а нам нужно ее связать со стейтом то используем useSelector\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch();\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        //setOpen(false)\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport { Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid } from '@material-ui/core'\r\nimport { useFormik } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loginTC } from '../../state/auth-reducer';\r\nimport { AppRootStateType } from '../../state/store';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\nexport const Login = () => {\r\n    const dispatch = useDispatch();\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required';\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'Invalid password (minimal 4 sybmols)';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'} />\r\n    } else {\r\n        return <Grid container justify=\"center\">\r\n            <Grid item xs={4}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <FormLabel>\r\n                            <p>To log in get registered\r\n                                <a href={'https://social-network.samuraijs.com/'}\r\n                                    target={'_blank'}>here\r\n                                </a>\r\n                            </p>\r\n                            <p>or use common test account credentials:</p>\r\n                            <p>Email: free@samuraijs.com</p>\r\n                            <p>Password: free</p>\r\n                        </FormLabel>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('email')}\r\n                            />\r\n                            {formik.touched.email &&\r\n                                formik.errors.email ? <div style={{ color: 'red' }}>{formik.errors.email}</div> : null}\r\n                            <TextField\r\n                                label=\"Password\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('password')}\r\n                            />\r\n                            {formik.touched.password && formik.errors.password ? <div style={{ color: 'red' }}>{formik.errors.password}</div> : null}\r\n                            <FormControlLabel\r\n                                label={'Remember me'}\r\n                                control={<Checkbox\r\n                                    {...formik.getFieldProps('rememberMe ')}\r\n                                />}\r\n                            />\r\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n    }\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\nimport { RequestStatusType } from '../../state/app-reducer';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    entityStatus?: RequestStatusType\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n    // debugger\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.entityStatus==='loading'}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.entityStatus==='loading'}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import { UpdateTaskModelType, TaskStatuses } from './../api/api';\r\nimport { AppRootStateType } from './store';\r\nimport { AddTodolistActionType, RemoveTodolistActionType, SetTodosActionType } from './todolists-reducer';\r\nimport { TasksStateType } from '../App';\r\nimport { Dispatch } from 'redux';\r\nimport { tasksAPI, TaskType } from '../api/api';\r\nimport { SetAppErrorType, setAppStatusAC, SetAppStatusType, StatuseesCode } from './app-reducer';\r\nimport { AxiosError } from 'axios';\r\nimport { handleServerNetworkError } from '../utils/error-utils';\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'todolist/tasks/REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n};\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'todolist/tasks/ADD-TASK',\r\n    task: TaskType\r\n};\r\n\r\nexport type ChangeTaskStatusActionType = ReturnType<typeof changeTaskStatusAC>;\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'todolist/tasks/CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n};\r\n\r\nexport type SetTasksActionType = {\r\n    type: 'todolist/tasks/SET-TASKS'\r\n    tasks: Array<TaskType>\r\n    todolistId: string\r\n};\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodosActionType\r\n    | SetTasksActionType\r\n    | SetAppStatusType\r\n    | SetAppErrorType;\r\n\r\nconst initialState: TasksStateType = {\r\n\r\n\r\n    /*\"todolistId1\": [\r\n       { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n           startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n       { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\r\n           startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n       { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n           startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n   ],\r\n   \"todolistId2\": [\r\n       { id: \"1\", title: \"bread\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n           startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n       { id: \"2\", title: \"milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: '',\r\n           startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n       { id: \"3\", title: \"tea\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n           startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n   ]*/\r\n};\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'todolist/tasks/SET-TASKS': {\r\n            const stateCopy = { ...state }\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n        }\r\n        case 'todolists/SET-TODOS': {\r\n            const stateCopy = { ...state }\r\n            action.todos.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case 'todolist/tasks/REMOVE-TASK': {\r\n            const stateCopy = { ...state }\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'todolist/tasks/ADD-TASK': {\r\n            const stateCopy = { ...state }\r\n            const tasks = stateCopy[action.task.todoListId];\r\n            const newTasks = [action.task, ...tasks];\r\n            stateCopy[action.task.todoListId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'todolist/tasks/CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? { ...t, status: action.status } : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({ ...state });\r\n        }\r\n        case 'todolist/tasks/CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? { ...t, title: action.title } : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({ ...state });\r\n        }\r\n        case 'todolists/ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n        }\r\n        case 'todolists/REMOVE-TODOLIST': {\r\n            const copyState = { ...state };\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\n//todo ACTION CREATORS\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return { type: 'todolist/tasks/REMOVE-TASK', taskId: taskId, todolistId: todolistId }\r\n};\r\nexport const addTaskAC = (task: TaskType): AddTaskActionType => {\r\n    return { type: 'todolist/tasks/ADD-TASK', task }\r\n};\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string) => {\r\n    return { type: 'todolist/tasks/CHANGE-TASK-STATUS', status, todolistId, taskId } as const\r\n};\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return { type: 'todolist/tasks/CHANGE-TASK-TITLE', title, todolistId, taskId }\r\n};\r\n\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string): SetTasksActionType => {\r\n    return { type: 'todolist/tasks/SET-TASKS', tasks, todolistId }\r\n};\r\n\r\n//todo THUNK CREATORS\r\nexport const fetchTasksTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        tasksAPI.getTasks(todolistId)\r\n            .then((res) => {\r\n                const tasks = res.data.items\r\n                dispatch(setTasksAC(tasks, todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                handleServerNetworkError(dispatch, err.message)\r\n            })\r\n    }\r\n};\r\n\r\nexport const removeTasksTC = (todolistId: string, taskId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n\r\n    tasksAPI.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }).catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n};\r\n\r\nexport const addTaskTC = (todolistId: string, taskTitile: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    tasksAPI.createTask(todolistId, taskTitile)\r\n        .then((res) => {\r\n            if (res.data.resultCode === StatuseesCode.successs) {\r\n                let newTask = res.data.data.item;\r\n                dispatch(addTaskAC(newTask))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerNetworkError(dispatch, res.data.messages[0])\r\n                // dispatch(setAppErrorAC(res.data.messages[0]))\r\n                // dispatch(setAppStatusAC('failed'))\r\n            }\r\n        }).catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n            // dispatch(setAppErrorAC(err.message));\r\n            // dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n};\r\n\r\nexport const updateTaskStatusTC = (todolistId: string, taskId: string, status: TaskStatuses) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n    //обращаемся к стейту\r\n    let state = getState();\r\n    //получаем массив тасок\r\n    let allTasks = state.tasks;\r\n    //теперь нужно достать таски конкретного тудулиста\r\n    let tasksForCurrentTodolist = allTasks[todolistId];\r\n    //находим конкретную таску у которой меняем статус\r\n    let findTask = tasksForCurrentTodolist.find(t => t.id === taskId);\r\n    //todo первый способ: передаюттся лишние строки на сервер\r\n    //const newTask = { ...findTask, status: status }\r\n    //const model = newTask;\r\n\r\n    //todo для того чтобы не передавать лишие строки на сервер делаем так:\r\n    //условие обязательно\r\n    if (findTask) {\r\n        const model: UpdateTaskModelType = {\r\n            title: findTask.title,\r\n            status: status,\r\n            startDate: findTask.startDate,\r\n            priority: findTask.priority,\r\n            description: findTask.description,\r\n            deadline: findTask.deadline\r\n        }\r\n\r\n        tasksAPI.updateTask(todolistId, taskId, model as UpdateTaskModelType)\r\n            .then((res) => {\r\n                let updateTask = res.data.data.item.status\r\n                dispatch(changeTaskStatusAC(taskId, updateTask, todolistId))\r\n            }).catch((err: AxiosError) => {\r\n                handleServerNetworkError(dispatch, err.message)\r\n            })\r\n    }\r\n\r\n};\r\n\r\nexport const changeTaskTitleTC = (todolistId: string, taskId: string, title: string) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    let findTask = getState().tasks[todolistId].find(t => t.id === taskId);\r\n    if (findTask) {\r\n        const model: UpdateTaskModelType = {\r\n            title: title,\r\n            status: findTask.status,\r\n            startDate: findTask.startDate,\r\n            priority: findTask.priority,\r\n            description: findTask.description,\r\n            deadline: findTask.deadline\r\n        }\r\n\r\n        tasksAPI.updateTask(todolistId, taskId, model as UpdateTaskModelType)\r\n            .then((res) => {\r\n                let title = res.data.data.item.title\r\n                dispatch(changeTaskTitleAC(taskId, title, todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            }).catch((err: AxiosError) => {\r\n                handleServerNetworkError(dispatch, err.message)\r\n            })\r\n    }\r\n};","import { todolistAPI } from './../api/api';\r\nimport { Dispatch } from 'redux';\r\nimport { FilterValuesType, TodolistType } from '../App';\r\nimport { RequestStatusType, SetAppErrorType, setAppStatusAC, SetAppStatusType, StatuseesCode } from './app-reducer';\r\nimport { AxiosError } from 'axios';\r\nimport { handleServerNetworkError } from '../utils/error-utils';\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'todolists/REMOVE-TODOLIST',\r\n    id: string\r\n};\r\n\r\nexport type AddTodolistActionType = {\r\n    type: 'todolists/ADD-TODOLIST',\r\n    todolist: TodolistType\r\n};\r\n\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'todolists/CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n};\r\n\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'todolists/CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n};\r\n\r\nexport type SetTodosActionType = ReturnType<typeof setTodosAC>\r\n\r\nexport type ChangeTodolistEntityStatusType = ReturnType<typeof changeTodolistEntityStatusAC>\r\ntype ActionsType =\r\n    RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | SetTodosActionType\r\n    | SetAppStatusType\r\n    | SetAppErrorType\r\n    | ChangeTodolistEntityStatusType;\r\n\r\nconst initialState: Array<TodolistDomainType> = [\r\n    /*{id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0},\r\n   {id: todolistId2, title: 'What to buy', filter: 'all', addedDate: '', order: 0}*/\r\n];\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n};\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'todolists/SET-TODOS': {\r\n            return action.todos.map((tl) => {\r\n                return { ...tl, filter: 'all', entityStatus: 'idle' }\r\n            })\r\n        }\r\n        case 'todolists/REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'todolists/ADD-TODOLIST': {\r\n\r\n            return [{ ...action.todolist, filter: 'all', entityStatus: 'idle' }, ...state]\r\n\r\n        }\r\n        case 'todolists/CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'todolists/CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'todolists/CHANGE-TODOLIST-ENTITY-STATUS': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.entityStatus = action.entityStatus;\r\n            }\r\n            return [...state]\r\n        }\r\n        // case 'CHANGE-TODOLIST-ENTITY-STATUS': {\r\n        //     return state.map(tl => tl.id === action.id ? { ...tl, entityStatus: action.entityStatus } : tl)\r\n        // }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//todo ACTION CREATORS\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: 'todolists/REMOVE-TODOLIST', id: todolistId }\r\n};\r\nexport const addTodolistAC = (todolist: TodolistType): AddTodolistActionType => ({ type: 'todolists/ADD-TODOLIST', todolist })\r\n// export const addTodolistAC = (title: string): AddTodolistActionType => {\r\n//     return { type: 'todolists/ADD-TODOLIST', title: title, todolistId: v1() }\r\n// };\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return { type: 'todolists/CHANGE-TODOLIST-TITLE', id: id, title: title }\r\n};\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return { type: 'todolists/CHANGE-TODOLIST-FILTER', id: id, filter: filter }\r\n};\r\n\r\nexport const setTodosAC = (todos: Array<TodolistType>) => {\r\n    return {\r\n        type: 'todolists/SET-TODOS',\r\n        todos\r\n    } as const\r\n};\r\n\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => {\r\n    return {\r\n        type: 'todolists/CHANGE-TODOLIST-ENTITY-STATUS',\r\n        id,\r\n        entityStatus\r\n    } as const\r\n};\r\n\r\n//todo THUNK CREATORS\r\nexport const setTodosTC = () => (dispatch: Dispatch) => {\r\n\r\n    dispatch(setAppStatusAC('loading'))\r\n    // 1. Side Effect\r\n    todolistAPI.getTodo()\r\n        .then(res => {\r\n            let todos = res.data\r\n            // 2. Dispatch actions(thunk)\r\n            dispatch(setTodosAC(todos))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }).catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n};\r\n\r\nexport const addTodosTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createTodo(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === StatuseesCode.successs) {\r\n                let newTodo = res.data.data.item\r\n                dispatch(addTodolistAC(newTodo))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerNetworkError(dispatch, res.data.messages[0])\r\n            }\r\n        }).catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n};\r\n\r\nexport const removeTodosTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    todolistAPI.deleteTodo(todolistId)\r\n        .then((res) => {\r\n            dispatch(removeTodolistAC(todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }).catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n};\r\n\r\nexport const changeTodosTitleTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.updateTodolist(todolistId, title)\r\n        .then((res) => {\r\n            dispatch(changeTodolistTitleAC(todolistId, title))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }).catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n};\r\n\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from './components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport { TaskStatuses, TaskType } from './api/api'\r\n\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from './components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from './components/EditableSpan/EditableSpan'\r\nimport { Button, IconButton } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { Task } from './Task'\r\nimport { FilterValuesType } from './App';\r\nimport { TaskStatuses, TaskType } from './api/api'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from './state/tasks-reducer'\r\nimport { RequestStatusType } from './state/app-reducer'\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n    demo?: boolean\r\n};\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (props.demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id]);\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    };\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle]);\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter]);\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter]);\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter]);\r\n\r\n\r\n    let tasksForTodolist = props.tasks;\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    };\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    };\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\r\n                <Delete />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} entityStatus={props.entityStatus} />\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                    removeTask={props.removeTask}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{ paddingTop: '10px' }}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                onClick={onAllClickHandler}\r\n                color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                onClick={onActiveClickHandler}\r\n                color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                onClick={onCompletedClickHandler}\r\n                color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div >\r\n});\r\n\r\n\r\n","import { Grid, Paper } from \"@material-ui/core\"\r\nimport { useCallback, useEffect } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { TaskStatuses } from \"./api/api\"\r\nimport { FilterValuesType, TasksStateType } from \"./App\"\r\nimport { AddItemForm } from \"./components/AddItemForm/AddItemForm\"\r\nimport { AppRootStateType } from \"./state/store\"\r\nimport { addTaskTC, changeTaskTitleTC, removeTasksTC, updateTaskStatusTC } from \"./state/tasks-reducer\"\r\nimport { addTodosTC, changeTodolistFilterAC, changeTodosTitleTC, removeTodosTC, setTodosTC, TodolistDomainType } from \"./state/todolists-reducer\"\r\nimport { Todolist } from \"./Todolist\"\r\n//* demo - проверка для сторибука\r\ntype PropsType = {\r\n    demo?: boolean\r\n};\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({ demo = false }) => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn);\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = setTodosTC()\r\n        dispatch(thunk)\r\n    }, []);\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists);\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    //todo TASKS FUNCTION\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(removeTasksTC(todolistId, id))\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(addTaskTC(todolistId, title))\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(updateTaskStatusTC(todolistId, id, status));\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n\r\n        dispatch(changeTaskTitleTC(todolistId, id, newTitle));\r\n    }, []);\r\n\r\n    //todo TODOLISTS FUNCTION\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        dispatch(removeTodosTC(id));\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(changeTodosTitleTC(id, title));\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodosTC(title));\r\n    }, [dispatch]);\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'} />\r\n    } else {\r\n        return <>\r\n            <Grid container style={{ padding: \"20px\" }}>\r\n                <AddItemForm addItem={addTodolist} />\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todolists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id];\r\n\r\n                        return <Grid item key={tl.id}>\r\n                            <Paper style={{ padding: \"10px\" }}>\r\n                                <Todolist\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    tasks={allTodolistTasks}\r\n                                    filter={tl.filter}\r\n                                    entityStatus={tl.entityStatus}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                    demo={demo}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    }\r\n};","import './App.css';\r\nimport { AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography, CircularProgress } from '@material-ui/core';\r\nimport { Menu } from '@material-ui/icons';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from './state/store';\r\nimport { initializeAppTC, RequestStatusType } from './state/app-reducer';\r\nimport { ErrorSnackbar } from './components/ErrorSnackbar/ErrorSnackbar';\r\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\r\nimport { Login } from './features/Login/Login';\r\nimport { TodolistsList } from './TodolistsList';\r\nimport { TaskType } from './api/api';\r\nimport { useEffect } from 'react';\r\nimport { logoutTC } from './state/auth-reducer';\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n};\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n};\r\n\r\n//* demo - проверка для сторибука\r\ntype PropsType = {\r\n    demo?: boolean\r\n};\r\n\r\nfunction App({ demo = false }: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized);\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n        \r\n    }, []);\r\n\r\n    const logoutHandler =()=>{\r\n        dispatch(logoutTC())\r\n    };\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{ position: 'fixed', top: '30%', textAlign: 'center', width: '100%' }}>\r\n            <CircularProgress />\r\n        </div>\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <BrowserRouter>\r\n                <ErrorSnackbar />\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu />\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            Todolist\r\n                        </Typography>\r\n                        {isLoggedIn&& <Button color=\"inherit\" onClick={logoutHandler}>Logout</Button> }\r\n                        \r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                {status === 'loading' && <LinearProgress color=\"secondary\" />}\r\n\r\n                <Container fixed>\r\n                    <Switch >\r\n                        <Route exact path={'/'} render={() => <TodolistsList demo={demo} />} />\r\n                        <Route path={'/login'} render={() => <Login />} />\r\n                        <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>} />\r\n                        <Redirect from={'*'} to={'/'} />\r\n                    </Switch>\r\n                </Container>\r\n            </BrowserRouter>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { tasksReducer } from './tasks-reducer';\r\nimport { todolistsReducer } from './todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { appReducer } from './app-reducer';\r\nimport { authReducer } from './auth-reducer';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n});\r\n\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './state/store';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}