{"version":3,"sources":["AddItemForm.tsx","EditabelSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addTask","trimmerTitle","trim","addItem","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","className","placeholder","fontSize","onClick","EditableSpan","editMode","setEditMode","id","onBlur","changeTitle","autoFocus","onDoubleClick","Todolist","tasks","map","t","isDone","Checkbox","color","checked","changeTaskStatus","newTitle","changeTaskTitle","IconButton","removeTask","Delete","changeTodolistTitle","removeTodolist","addTasks","Button","filter","changeFilter","App","todoListID1","v1","todoListID2","todoLists","setTodolists","setTasks","taskID","todolistID","filterTasks","newTask","todolistTasks","changeStatus","newIsDone","task","find","todolistSingle","tl","TodolistComponents","tasksForTodolist","Grid","item","Paper","style","elevation","Container","fixed","container","AppBar","position","Toolbar","todolist","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.99fa092c.chunk.js","sourcesContent":["import { TextField } from '@material-ui/core';\r\nimport React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.key === \"Enter\") { addTask(); }\r\n    }\r\n    const addTask = () => {\r\n        const trimmerTitle = title.trim()\r\n        if (trimmerTitle) {\r\n            props.addItem(trimmerTitle);\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required!\")\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant=\"outlined\"\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onKeyPressAddTask}\r\n                className={error ? \"error\" : \"default\"} \r\n                placeholder=\"Enter the text\"/>\r\n            <AddIcon fontSize=\"large\" onClick={addTask} className=\"btn\">+</AddIcon>\r\n            {error && <div className=\"errorMessage\">{error}</div>}\r\n        </div>\r\n    )\r\n}","import { TextField } from '@material-ui/core';\r\nimport React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (newTitle: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    //режим редактирования\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    //локальный стейт для закидывания названия таски в инпут\r\n    let [title, setTitle] = useState(props.title);\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    }\r\nconst onEnter = (e:KeyboardEvent)=> {\r\n    if(e.key ==='Enter') {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n}\r\n    \r\n    const onEditMode = () => { setEditMode(true) };\r\n    const offEditMode = () => {\r\n        setEditMode(false);\r\n        props.changeTitle(title);// для сохранения изменений в таске\r\n    };\r\n    return (\r\n        editMode ? <TextField  id=\"filled-basic\"variant=\"filled\" value={title} onChange={onChangeTitle} onBlur={offEditMode} autoFocus onKeyPress={onEnter} /> : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}","import { Button, Checkbox, IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport React, { ChangeEvent } from 'react';\r\nimport { AddItemForm } from './AddItemForm';\r\nimport { EditableSpan } from './EditabelSpan';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type FilterType = \"all\" | \"active\" | \"complete\"\r\n\r\ntype TodolistPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterType\r\n    removeTask: (taskID: string, todolistID: string) => void\r\n    removeTodolist: (todolistID: string) => void\r\n    addTasks: (title: string, todolistID: string) => void\r\n    changeFilter: (value: FilterType, todolistID: string) => void\r\n    changeTaskStatus: (taskId: string, newIsDone: boolean, todolistID: string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todolistID: string) => void\r\n    changeTodolistTitle: (newTitle: string, todolistID: string) => void\r\n\r\n\r\n}\r\n\r\nexport function Todolist(props: TodolistPropsType) {\r\n    const setAllFilter = () => { props.changeFilter(\"all\", props.id) };\r\n    const setActiveFilter = () => { props.changeFilter(\"active\", props.id) };\r\n    const setCompleteFilter = () => { props.changeFilter(\"complete\", props.id) };\r\n\r\n    const tasks = props.tasks.map(\r\n        t => {\r\n            const remove = () => { props.removeTask(t.id, props.id) }\r\n            const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) =>\r\n                props.changeTaskStatus(t.id, e.currentTarget.checked, props.id);\r\n            const changeTaskTitle = (newTitle: string) => { props.changeTaskTitle(t.id, newTitle, props.id) }\r\n            return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                <Checkbox \r\n                    color=\"primary\"\r\n                    checked={t.isDone}\r\n                    onChange={changeTaskStatus} />\r\n                <EditableSpan title={t.title} changeTitle={changeTaskTitle} />\r\n                <IconButton onClick={remove}><Delete fontSize=\"small\" /></IconButton>\r\n            </li>\r\n        }\r\n    )\r\n    const removeTodolist = () => { props.removeTodolist(props.id) };\r\n    const addTask = (title: string) => { props.addTasks(title, props.id) };\r\n    const changeTodolistTitle = (title: string) => { props.changeTodolistTitle(title, props.id) };\r\n    return (\r\n        <div>\r\n            \r\n            <h3>\r\n                <EditableSpan title={props.title} changeTitle={changeTodolistTitle} />\r\n                <HighlightOffIcon onClick={removeTodolist} className=\"btn\" fontSize=\"default\" color=\"secondary\"> </HighlightOffIcon></h3>\r\n            <AddItemForm addItem={addTask} />\r\n            <ul>\r\n                {tasks}\r\n            </ul>\r\n            <div>\r\n                <Button variant={props.filter === 'all' ? \"contained\" : \"outlined\"} color=\"secondary\" onClick={setAllFilter} className={props.filter === 'all' ? \"active-filter\" : \"\"}>All</Button>\r\n                <Button variant={props.filter === 'active' ? \"contained\" : \"outlined\"} color=\"secondary\" onClick={setActiveFilter} className={props.filter === 'active' ? \"active-filter\" : \"\"}>Active</Button>\r\n                <Button variant={props.filter === 'complete' ? \"contained\" : \"outlined\"} color=\"secondary\" onClick={setCompleteFilter} className={props.filter === 'complete' ? \"active-filter\" : \"\"}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import { AppBar, Container, Grid, Paper, Toolbar } from '@material-ui/core';\r\nimport React, { useState } from 'react';\r\nimport { v1 } from 'uuid';\r\nimport { AddItemForm } from './AddItemForm';\r\nimport './App.css';\r\nimport { FilterType, Todolist, TaskType } from './Todolist';\r\n\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n}\r\ntype TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    //BLL\r\n    const todoListID1 = v1();\r\n    const todoListID2 = v1();\r\n    const [todoLists, setTodolists] = useState<Array<TodolistType>>(\r\n        [\r\n            { id: todoListID1, title: \"What to learn\", filter: \"all\" },\r\n            { id: todoListID2, title: \"What to buy\", filter: \"all\" },\r\n        ]\r\n    )\r\n    let [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoListID1]: [\r\n            { id: v1(), title: \"HTML&CSS\", isDone: true },\r\n            { id: v1(), title: \"JS\", isDone: true },\r\n            { id: v1(), title: \"React\", isDone: false },\r\n            { id: v1(), title: \"Git\", isDone: false },\r\n            { id: v1(), title: \"SCSS\", isDone: false }\r\n        ],\r\n        [todoListID2]: [\r\n            { id: v1(), title: \"Milk\", isDone: false },\r\n            { id: v1(), title: \"Bread\", isDone: true },\r\n            { id: v1(), title: \"EGGS\", isDone: false },\r\n            { id: v1(), title: \"Meat\", isDone: false },\r\n        ],\r\n\r\n    })\r\n\r\n\r\n    //Delete tasks\r\n    function removeTask(taskID: string, todolistID: string) {\r\n        const todolistTasks = tasks[todolistID]; //ищем в каком тудулисте таска\r\n        const filterTasks = todolistTasks.filter(t => t.id !== taskID);\r\n        tasks[todolistID] = filterTasks;\r\n        setTasks({ ...tasks })\r\n    }\r\n    //Add tasks from input\r\n    function addTask(title: string, todolistID: string) {\r\n        let newTask = { id: v1(), title: title, isDone: false }; // новая таска\r\n        const todolistTasks = tasks[todolistID];//ищем в каком тудулисте таска\r\n        tasks[todolistID] = [newTask, ...todolistTasks]\r\n        setTasks({ ...tasks })\r\n    }\r\n    //Change checkbox\r\n    function changeStatus(id: string, newIsDone: boolean, todolistID: string) {\r\n        const todolistTasks = tasks[todolistID];//ищем в каком тудулисте таска\r\n\r\n        const task = todolistTasks.find(t => t.id === id);\r\n        if (task) {\r\n            task.isDone = newIsDone;\r\n            setTasks({ ...tasks })\r\n        }\r\n    }\r\n    //Change text in tasks\r\n    function changeTaskTitle(id: string, newTitle: string, todolistID: string) {\r\n        const todolistTasks = tasks[todolistID];//ищем в каком тудулисте таска\r\n\r\n        const task = todolistTasks.find(t => t.id === id);\r\n        if (task) {\r\n            task.title = newTitle;\r\n            setTasks({ ...tasks })\r\n        }\r\n    }\r\n    //Filter tasks on buttons\r\n    function changeFilter(value: FilterType, todolistID: string) {\r\n        const todolistSingle = todoLists.find(tl => tl.id === todolistID)//ищем нужный тудулист\r\n        if (todolistSingle) { todolistSingle.filter = value }\r\n        setTodolists([...todoLists])\r\n    }\r\n    //Change text in title for todolist\r\n    function changeTodolistTitle(newTitle: string, todolistID: string) {\r\n        const todolistSingle = todoLists.find(tl => tl.id === todolistID)//ищем нужный тудулист\r\n        if (todolistSingle) { todolistSingle.title = newTitle }\r\n        setTodolists([...todoLists])\r\n    }\r\n    //Delete Todolist\r\n    function removeTodolist(todolistID: string) {\r\n        setTodolists(todoLists.filter(tl => tl.id !== todolistID))\r\n        delete tasks[todolistID]\r\n    }\r\n    const TodolistComponents = todoLists.map(tl => {\r\n        let tasksForTodolist = tasks[tl.id];\r\n        if (tl.filter === \"active\") { tasksForTodolist = tasksForTodolist.filter(t => t.isDone === false); }\r\n        if (tl.filter === \"complete\") { tasksForTodolist = tasksForTodolist.filter(t => t.isDone === true); }\r\n\r\n        return (\r\n            <Grid item>\r\n                <Paper style={{ \"padding\": \"10px\" }} elevation={3}>\r\n                    <Todolist\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        tasks={tasksForTodolist}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTasks={addTask}\r\n                        changeTaskStatus={changeStatus}\r\n                        filter={tl.filter}\r\n                        removeTodolist={removeTodolist}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodolistTitle={changeTodolistTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    function addTodolist(title: string) {\r\n        let todolist: TodolistType = {\r\n            id: v1(),\r\n            title: title,\r\n            filter: \"all\"\r\n        }\r\n        setTodolists([todolist, ...todoLists]);\r\n        setTasks({ ...tasks, [todolist.id]: [] })\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <Container fixed>\r\n                <Grid container style={{ \"margin\": \"15px\" }}>\r\n                    <AppBar position=\"static\" color=\"primary\">\r\n                        <Toolbar variant=\"regular\">\r\n                            <AddItemForm addItem={addTodolist}/>\r\n                            </Toolbar>\r\n                            </AppBar>\r\n                </Grid>\r\n                        <Grid container spacing={3}>\r\n\r\n                            {TodolistComponents}\r\n\r\n                        </Grid>\r\n            </Container>\r\n\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}