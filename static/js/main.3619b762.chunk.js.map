{"version":3,"sources":["api/api.ts","reportWebVitals.ts","state/app-reducer.ts","utils/error-utils.ts","state/auth-reducer.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","components/AddItemForm/AddItemForm.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","components/EditableSpan/EditableSpan.tsx","Task.tsx","Todolist.tsx","TodolistsList.tsx","components/AppBar/AppBar.tsx","App.tsx","state/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StatuseesCode","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","delete","put","tasksAPI","taskId","taskTitile","model","authAPI","data","handleServerNetworkError","dispatch","message","setAppErrorAC","error","setAppStatusAC","status","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","actions","authReducer","reducer","isInitialized","setIsInitializedAC","appReducer","Alert","props","elevation","variant","ErrorSnackbar","useSelector","app","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","auth","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","length","onSubmit","res","resultCode","successs","messages","catch","err","resetForm","to","Grid","container","justify","handleSubmit","FormControl","FormLabel","href","target","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","FormControlLabel","control","Checkbox","Button","type","AddItemForm","React","memo","useState","setTitle","setError","addItem","trim","onChange","e","currentTarget","onKeyPress","charCode","helperText","disabled","entityStatus","size","mainItem","width","IconButton","onClick","removeTodolistAC","index","findIndex","tl","id","splice","addTodolistAC","unshift","todolist","filter","changeTodolistTitleAC","find","changeTodolistFilterAC","setTodolistAC","todos","map","changeTodolistEntityStatusAC","todolistsReducer","removeTaskAC","t","addTaskAC","task","todoListId","push","changeTaskStatusAC","newTasksArray","changeTaskTitleAC","setTasksAC","tasks","extraReducers","builder","addCase","forEach","tasksReducer","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","GreenCheckbox","withStyles","root","green","checked","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Delete","Todolist","useEffect","demo","thunk","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","paddingTop","display","justifyContent","TodolistsList","todolists","removeTasksTC","newTask","item","addTaskTC","changeStatus","getState","findTask","startDate","priority","description","deadline","updateTask","updateTaskStatusTC","newTitle","changeTaskTitleTC","changeTodolistTitleTC","addTodolist","newTodo","addTodolistTC","padding","spacing","allTodolistTasks","Paper","NewAppBar","background","borderRadius","border","height","boxShadow","minHeight","position","textTransform","AppBar","CustomNewAppBar","Toolbar","Typography","cursor","logoutHandler","right","fontWeight","fontSize","App","finally","bg","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3619b762.chunk.js","sourcesContent":["import axios from 'axios'\nimport { TodolistType } from '../App'\n\ntype ResponseType<T> = {\n    resultCode: number\n    messages: Array<string>\n    data: T\n};\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n};\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n};\n\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n};\n\nexport type UpdateTaskModelType = {\n    title: string\n    description: string\n    status: number\n    priority: number\n    startDate: string\n    deadline: string\n};\n\ntype GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n};\n\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe?: boolean\n    captcha?: boolean\n};\n\n\nconst instance = axios.create({\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\n    withCredentials: true,\n    headers: {\n        'API-KEY': 'd97a07a4-ff33-4e06-9242-469ab6bb62a7'\n    }\n});\n\nexport const todolistAPI = {\n\n    getTodo() {\n        const promise = instance.get<Array<TodolistType>>(`todo-lists`)\n        return promise\n    },\n    createTodo(title: string) {\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', { title: title })\n        return promise\n    },\n    deleteTodo(todolistId: string) {\n        const promise = instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}`)\n        return promise\n\n    },\n    updateTodolist(todolistId: string, title: string) {\n        const promise = instance.put<ResponseType<{}>>(`todo-lists/${todolistId}`, { title: title })\n        return promise\n    },\n};\n\nexport const tasksAPI = {\n\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`);\n    },\n    createTask(todolistId: string, taskTitile: string) {\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, { title: taskTitile });\n    },\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n        return instance.put<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\n    }\n};\n\nexport const authAPI = {\n    login(data: LoginParamsType) {\n        return instance.post<ResponseType<{ userId: number }>>('auth/login', data);\n    },\n    logout() {\n        return instance.delete('auth/login');\n    },\n    me() {\n        return instance.get<any>('auth/me');\n    }\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Dispatch } from \"redux\"\nimport { authAPI } from \"../api/api\"\nimport { setIsLoggedInAC } from \"./auth-reducer\"\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\n\nconst initialState = {\n    status: 'idle' as RequestStatusType,\n    error: null as string | null,\n    isInitialized: false\n};\nexport enum StatuseesCode {\n    successs = 0,\n    failed = 1,\n    captcha = 10\n};\n\n//type InitialStateType = typeof initialState;\nconst slice = createSlice({\n    name: \"app\",\n    initialState: initialState,\n    reducers: {\n        setAppStatusAC: (state, action: PayloadAction<{ status: RequestStatusType }>) => {\n            { state.status = action.payload.status }\n        },\n        setAppErrorAC: (state, action: PayloadAction<{ error: string | null }>) => {\n            { state.error = action.payload.error }\n        },\n        setIsInitializedAC: (state, action: PayloadAction<{ isInitialized: boolean }>) => {\n            { state.isInitialized = action.payload.isInitialized }\n        }\n    }\n})\nexport const { setAppErrorAC, setAppStatusAC, setIsInitializedAC } = slice.actions;\nexport const appReducer = slice.reducer;\n\n\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\n    authAPI.me().then(res => {\n        if (res.data.resultCode === StatuseesCode.successs) {\n            dispatch(setIsLoggedInAC({ value: true }));\n        } else {\n\n        }\n    }).finally(() => {\n        dispatch(slice.actions.setIsInitializedAC({ isInitialized: true }))\n    })\n};\n","import { Dispatch } from 'redux';\nimport { setAppErrorAC, setAppStatusAC } from \"../state/app-reducer\"\n\n\n// generic function\n// export const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\n//     if (data.messages.length) {\n//         dispatch(setAppErrorAC(data.messages[0]))\n//     } else {\n//         dispatch(setAppErrorAC('Some error occurred'))\n//     }\n//     dispatch(setAppStatusAC('failed'))\n//  }\n\nexport const handleServerNetworkError = (dispatch: Dispatch, message: string) => {\n    dispatch(setAppErrorAC({ error: message }))\n    dispatch(setAppStatusAC({ status: 'failed' }))\n}\n\n//type ErrorsActionTypes = SetAppStatusType | SetAppErrorType","import { authAPI, LoginParamsType } from './../api/api';\nimport { Dispatch } from 'redux'\nimport { setAppStatusAC, StatuseesCode } from './app-reducer'\nimport { handleServerNetworkError } from '../utils/error-utils';\nimport { AxiosError } from 'axios';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nconst initialState = {\n    isLoggedIn: false\n};\n\nconst slice = createSlice({\n    name: \"auth\",\n    initialState: initialState,\n    reducers: {\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\n            { state.isLoggedIn = action.payload.value }\n        }\n    }\n})\nexport const setIsLoggedInAC = slice.actions.setIsLoggedInAC;\nexport const authReducer = slice.reducer;\n\n// thunks\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({ status: 'loading' }))\n    authAPI.login(data)\n        .then(res => {\n            if (res.data.resultCode === StatuseesCode.successs) {\n                dispatch(slice.actions.setIsLoggedInAC({ value: true }));\n                dispatch(setAppStatusAC({ status: 'succeeded' }))\n            } else {\n                handleServerNetworkError(dispatch, res.data.messages[0])\n            }\n        })\n        .catch((err: AxiosError) => {\n            handleServerNetworkError(dispatch, err.message)\n        })\n};\n\nexport const logoutTC = () => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({ status: 'loading' }))\n    authAPI.logout()\n        .then(res => {\n            if (res.data.resultCode === StatuseesCode.successs) {\n                dispatch(slice.actions.setIsLoggedInAC({ value: false }))\n                dispatch(setAppStatusAC({ status: 'succeeded' }))\n            } else {\n                handleServerNetworkError(dispatch, res.data.messages[0])\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(dispatch, error.messages)\n        })\n};\n","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { AppRootStateType } from '../../state/store'\nimport { setAppErrorAC } from '../../state/app-reducer'\n\nfunction Alert(props: AlertProps) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nexport function ErrorSnackbar() {\n    //так как компонента некотролируемая, а нам нужно ее связать со стейтом то используем useSelector\n    //const [open, setOpen] = React.useState(true)\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\n    const dispatch = useDispatch();\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return\n        }\n        //setOpen(false)\n        dispatch(setAppErrorAC({ error: null }))\n    }\n\n    return (\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\">\n                {error}\n            </Alert>\n        </Snackbar>\n    )\n}\n\n","import React from 'react'\nimport { Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid } from '@material-ui/core'\nimport { useFormik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loginTC } from '../../state/auth-reducer';\nimport { AppRootStateType } from '../../state/store';\nimport { Redirect } from 'react-router-dom';\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\nexport const Login = () => {\n    const dispatch = useDispatch();\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn);\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Password is required';\n            } else if (values.password.length < 4) {\n                errors.password = 'Invalid password (minimal 4 sybmols)';\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values));\n            formik.resetForm();\n        },\n    })\n\n    if (isLoggedIn) {\n        return <Redirect to={'/'} />\n    } else {\n        return <Grid container justify=\"center\">\n            <Grid>\n                <form onSubmit={formik.handleSubmit}>\n                    <FormControl>\n                        <FormLabel>\n                            <p>To log in get registered\n                                <a href={'https://social-network.samuraijs.com/'}\n                                    target={'_blank'}>here\n                                </a>\n                            </p>\n                            <p>or use common test account credentials:</p>\n                            <p>Email:\n                                pavel.kv94@yandex.by</p>\n                            <p>Password: 123456</p>\n                        </FormLabel>\n                        <FormGroup>\n                            <TextField\n                                label=\"Email\"\n                                margin=\"normal\"\n                                {...formik.getFieldProps('email')}\n                            />\n                            {formik.touched.email &&\n                                formik.errors.email ? <div style={{ color: 'red' }}>{formik.errors.email}</div> : null}\n                            <TextField\n                                label=\"Password\"\n                                margin=\"normal\"\n                                {...formik.getFieldProps('password')}\n                            />\n                            {formik.touched.password && formik.errors.password ? <div style={{ color: 'red' }}>{formik.errors.password}</div> : null}\n                            <FormControlLabel\n                                label={'Remember me'}\n                                control={<Checkbox\n                                    {...formik.getFieldProps('rememberMe ')}\n                                />}\n                            />\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\n                        </FormGroup>\n                    </FormControl>\n                </form>\n            </Grid>\n        </Grid>\n    }\n}","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\nimport { IconButton, TextField } from '@material-ui/core';\nimport { AddBox } from '@material-ui/icons';\nimport { RequestStatusType } from '../../state/app-reducer';\nimport AddCircleTwoToneIcon from '@material-ui/icons/AddCircleTwoTone';\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n    entityStatus?: RequestStatusType\n    mainItem?: boolean\n}\n\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\n\n    let [title, setTitle] = useState(\"\")\n    let [error, setError] = useState<string | null>(null)\n\n    const addItem = () => {\n        if (title.trim() !== \"\") {\n            props.addItem(title);\n            setTitle(\"\");\n        } else {\n            setError(\"Title is required\");\n        }\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null);\n        }\n        if (e.charCode === 13) {\n            addItem();\n        }\n    }\n\n    return <div >\n        <TextField variant=\"outlined\"\n            error={!!error}\n            value={title}\n            onChange={onChangeHandler}\n            onKeyPress={onKeyPressHandler}\n            label=\"Title\"\n            helperText={error}\n            disabled={props.entityStatus === 'loading'}\n            size=\"small\"\n            style={props.mainItem ? { width: \"320px\" } : {}}\n        />\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.entityStatus === 'loading'}>\n            <NoteAddIcon />\n        </IconButton>\n    </div>\n})\n","import { todolistAPI } from './../api/api';\nimport { Dispatch } from 'redux';\nimport { FilterValuesType, TodolistType } from '../App';\nimport { RequestStatusType, setAppStatusAC, StatuseesCode } from './app-reducer';\nimport { AxiosError } from 'axios';\nimport { handleServerNetworkError } from '../utils/error-utils';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\n\n\n\nconst initialState: Array<TodolistDomainType> = [\n    /*{id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0},\n   {id: todolistId2, title: 'What to buy', filter: 'all', addedDate: '', order: 0}*/\n];\n\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValuesType\n    entityStatus: RequestStatusType\n};\n\n\nconst slice = createSlice({\n    name: \"todolist\",\n    initialState: initialState,\n    reducers: {\n        removeTodolistAC(state, action: PayloadAction<{ todolistId: string }>) {\n            {\n                const index = state.findIndex(tl => tl.id === action.payload.todolistId);\n                if (index > -1) {\n                    state.splice(index, 1)\n                }\n            \n            }\n        },\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\n            { state.unshift({ ...action.payload.todolist, filter: 'all', entityStatus: 'idle' }) }\n        },\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\n            {\n                const todolist = state.find(tl => tl.id === action.payload.id);\n                if (todolist) {\n                    // если нашёлся - изменим ему заголовок\n                    todolist.title = action.payload.title;\n                }\n            }\n        },\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\n            {\n                const todolist = state.find(tl => tl.id === action.payload.id);\n                if (todolist) {\n                    // если нашёлся - изменим ему заголовок\n                    todolist.filter = action.payload.filter;\n                }\n            }\n        },\n        setTodolistAC(state, action: PayloadAction<{ todos: Array<TodolistType> }>) {\n            {\n                return action.payload.todos.map((tl: any) => {\n                    return { ...tl, filter: 'all', entityStatus: 'idle' }\n                })\n            }\n        },\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, entityStatus: RequestStatusType }>) {\n            {\n                const todolist = state.find(tl => tl.id === action.payload.id);\n                if (todolist) {\n                    todolist.entityStatus = action.payload.entityStatus;\n                }\n            }\n        },\n    }\n})\nexport const { removeTodolistAC, addTodolistAC, changeTodolistTitleAC, changeTodolistFilterAC, setTodolistAC, changeTodolistEntityStatusAC } = slice.actions\n\nexport const todolistsReducer = slice.reducer;\n\n//todo THUNK CREATORS\nexport const setTodolistTC = () => (dispatch: Dispatch) => {\n\n    dispatch(setAppStatusAC({ status: 'loading' }))\n    // 1. Side Effect\n    todolistAPI.getTodo()\n        .then(res => {\n            let todos = res.data\n            // 2. Dispatch actions(thunk)\n            dispatch(setTodolistAC({ todos: todos }))\n            dispatch(setAppStatusAC({ status: 'succeeded' }))\n        }).catch((err: AxiosError) => {\n            handleServerNetworkError(dispatch, err.message)\n        })\n};\n\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({ status: 'loading' }))\n    todolistAPI.createTodo(title)\n        .then((res) => {\n            if (res.data.resultCode === StatuseesCode.successs) {\n                let newTodo = res.data.data.item\n                dispatch(addTodolistAC({ todolist: newTodo }))\n                dispatch(setAppStatusAC({ status: 'succeeded' }))\n            } else {\n                handleServerNetworkError(dispatch, res.data.messages[0])\n            }\n        }).catch((err: AxiosError) => {\n            handleServerNetworkError(dispatch, err.message)\n        })\n};\n\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({ status: 'loading' }))\n    dispatch(changeTodolistEntityStatusAC({ id: todolistId, entityStatus: 'loading' }))\n    todolistAPI.deleteTodo(todolistId)\n        .then((res) => {\n            dispatch(removeTodolistAC({ todolistId: todolistId }))\n            dispatch(setAppStatusAC({ status: 'succeeded' }))\n        }).catch((err: AxiosError) => {\n            handleServerNetworkError(dispatch, err.message)\n        })\n};\n\nexport const changeTodolistTitleTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({ status: 'loading' }))\n    todolistAPI.updateTodolist(todolistId, title)\n        .then((res) => {\n            dispatch(changeTodolistTitleAC({ id: todolistId, title: title }))\n            dispatch(setAppStatusAC({ status: 'succeeded' }))\n        }).catch((err: AxiosError) => {\n            handleServerNetworkError(dispatch, err.message)\n        })\n};\n\n\n","import { UpdateTaskModelType, TaskStatuses } from './../api/api';\nimport { AppRootStateType } from './store';\nimport { addTodolistAC, removeTodolistAC, setTodolistAC } from './todolists-reducer';\nimport { TasksStateType } from '../App';\nimport { Dispatch } from 'redux';\nimport { tasksAPI, TaskType } from '../api/api';\nimport { setAppStatusAC, StatuseesCode } from './app-reducer';\nimport { AxiosError } from 'axios';\nimport { handleServerNetworkError } from '../utils/error-utils';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\n\n\nconst initialState: TasksStateType = {\n\n\n    /*\"todolistId1\": [\n       { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\n           startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\n       { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\n           startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\n       { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\n           startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\n   ],\n   \"todolistId2\": [\n       { id: \"1\", title: \"bread\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\n           startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\n       { id: \"2\", title: \"milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: '',\n           startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\n       { id: \"3\", title: \"tea\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\n           startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\n   ]*/\n};\n\n\n\nconst slice = createSlice({\n    name: \"tasks\",\n    initialState: initialState,\n    reducers: {\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\n            {\n                state[action.payload.todolistId] = state[action.payload.todolistId].filter(t => t.id !== action.payload.taskId);\n            }\n        },\n        addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\n            {\n                state[action.payload.task.todoListId].push(action.payload.task)\n            }\n        },\n        changeTaskStatusAC(state, action: PayloadAction<{ taskId: string, status: TaskStatuses, todolistId: string }>) {\n            {\n                let newTasksArray = state[action.payload.todolistId]\n                    .map(t => t.id === action.payload.taskId ? { ...t, status: action.payload.status } : t);\n                state[action.payload.todolistId] = newTasksArray;\n\n            }\n        },\n        changeTaskTitleAC(state, action: PayloadAction<{ taskId: string, title: string, todolistId: string }>) {\n            {\n                const newTasksArray = state[action.payload.todolistId]\n                    .map(t => t.id === action.payload.taskId ? { ...t, title: action.payload.title } : t);\n\n                state[action.payload.todolistId] = newTasksArray;\n\n            }\n        },\n        setTasksAC(state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) {\n            {\n                state[action.payload.todolistId] = action.payload.tasks\n            }\n        }\n    },\n    extraReducers: (builder) => {\n        builder.addCase(addTodolistAC, (state, action) => {\n            state[action.payload.todolist.id] = []\n        });\n        builder.addCase(removeTodolistAC, (state, action) => {\n            delete state[action.payload.todolistId]\n        });\n        builder.addCase(setTodolistAC, (state, action) => {\n            action.payload.todos.forEach((tl) => {\n                state[tl.id] = []\n            })\n        });\n    }\n})\nexport const { removeTaskAC, addTaskAC, changeTaskStatusAC, changeTaskTitleAC, setTasksAC } = slice.actions\n\nexport const tasksReducer = slice.reducer;\n\n\n\n//todo THUNK CREATORS\nexport const fetchTasksTC = (todolistId: string) => {\n    return (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC({ status: 'loading' }))\n        tasksAPI.getTasks(todolistId)\n            .then((res) => {\n                const tasks = res.data.items\n                dispatch(setTasksAC({ tasks: tasks, todolistId: todolistId }))\n                dispatch(setAppStatusAC({ status: 'succeeded' }))\n            })\n            .catch((err: AxiosError) => {\n                handleServerNetworkError(dispatch, err.message)\n            })\n    }\n};\n\nexport const removeTasksTC = (todolistId: string, taskId: string) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({ status: 'loading' }))\n\n    tasksAPI.deleteTask(todolistId, taskId)\n        .then((res) => {\n            dispatch(removeTaskAC({ taskId: taskId, todolistId: todolistId }))\n            dispatch(setAppStatusAC({ status: 'succeeded' }))\n        }).catch((err: AxiosError) => {\n            handleServerNetworkError(dispatch, err.message)\n        })\n};\n\nexport const addTaskTC = (todolistId: string, taskTitile: string) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({ status: 'loading' }))\n    tasksAPI.createTask(todolistId, taskTitile)\n        .then((res) => {\n            if (res.data.resultCode === StatuseesCode.successs) {\n                let newTask = res.data.data.item;\n                dispatch(addTaskAC({ task: newTask }))\n                dispatch(setAppStatusAC({ status: 'succeeded' }))\n            } else {\n                handleServerNetworkError(dispatch, res.data.messages[0])\n            }\n        }).catch((err: AxiosError) => {\n            handleServerNetworkError(dispatch, err.message)\n        })\n};\n\nexport const updateTaskStatusTC = (todolistId: string, taskId: string, status: TaskStatuses) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\n\n    //обращаемся к стейту\n    let state = getState();\n    //получаем массив тасок\n    let allTasks = state.tasks;\n    //теперь нужно достать таски конкретного тудулиста\n    let tasksForCurrentTodolist = allTasks[todolistId];\n    //находим конкретную таску у которой меняем статус\n    let findTask = tasksForCurrentTodolist.find(t => t.id === taskId);\n    //todo первый способ: передаюттся лишние строки на сервер\n    //const newTask = { ...findTask, status: status }\n    //const model = newTask;\n\n    //todo для того чтобы не передавать лишие строки на сервер делаем так:\n    //условие обязательно\n    if (findTask) {\n        const model: UpdateTaskModelType = {\n            title: findTask.title,\n            status: status,\n            startDate: findTask.startDate,\n            priority: findTask.priority,\n            description: findTask.description,\n            deadline: findTask.deadline\n        }\n\n        tasksAPI.updateTask(todolistId, taskId, model as UpdateTaskModelType)\n            .then((res) => {\n                let updateTask = res.data.data.item.status\n                dispatch(changeTaskStatusAC({ taskId: taskId, status: updateTask, todolistId: todolistId }))\n            }).catch((err: AxiosError) => {\n                handleServerNetworkError(dispatch, err.message)\n            })\n    }\n\n};\n\nexport const changeTaskTitleTC = (todolistId: string, taskId: string, title: string) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\n    dispatch(setAppStatusAC({ status: 'loading' }))\n    let findTask = getState().tasks[todolistId].find(t => t.id === taskId);\n    if (findTask) {\n        const model: UpdateTaskModelType = {\n            title: title,\n            status: findTask.status,\n            startDate: findTask.startDate,\n            priority: findTask.priority,\n            description: findTask.description,\n            deadline: findTask.deadline\n        }\n\n        tasksAPI.updateTask(todolistId, taskId, model as UpdateTaskModelType)\n            .then((res) => {\n                let title = res.data.data.item.title\n                dispatch(changeTaskTitleAC({ taskId: taskId, title: title, todolistId: todolistId }))\n                dispatch(setAppStatusAC({ status: 'succeeded' }))\n            }).catch((err: AxiosError) => {\n                handleServerNetworkError(dispatch, err.message)\n            })\n    }\n};","import React, { ChangeEvent, useState } from 'react';\nimport { TextField } from '@material-ui/core';\n\ntype EditableSpanPropsType = {\n    value: string\n    onChange: (newValue: string) => void\n}\n\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\n    let [editMode, setEditMode] = useState(false);\n    let [title, setTitle] = useState(props.value);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n        setTitle(props.value);\n    }\n    const activateViewMode = () => {\n        setEditMode(false);\n        props.onChange(title);\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return editMode\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\n});\n","import React, { ChangeEvent, useCallback } from 'react'\nimport { IconButton } from '@material-ui/core'\nimport { EditableSpan } from './components/EditableSpan/EditableSpan'\nimport { Delete } from '@material-ui/icons'\nimport { TaskStatuses, TaskType } from './api/api'\nimport { withStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\n\ntype TaskPropsType = {\n    task: TaskType\n    todolistId: string\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n    removeTask: (taskId: string, todolistId: string) => void\n}\n\n//checkbox\n\nconst GreenCheckbox = withStyles({\n    root: {\n        color: green[400],\n        '&$checked': {\n            color: green[600],\n        },\n    },\n    checked: {},\n})((props: CheckboxProps) => <Checkbox color=\"default\" {...props} />);\n\nexport const Task = React.memo((props: TaskPropsType) => {\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\n\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        let newIsDoneValue = e.currentTarget.checked\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\n    }, [props.task.id, props.todolistId]);\n\n    const onTitleChangeHandler = useCallback((newValue: string) => {\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\n    }, [props.task.id, props.todolistId]);\n\n    return <div key={props.task.id} className={TaskStatuses.Completed ? 'is-done' : ''}>\n        <GreenCheckbox checked={props.task.status === TaskStatuses.Completed} onChange={onChangeHandler} name=\"checkedG\" />\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler} />\n        <IconButton onClick={onClickHandler}>\n            <Delete color=\"secondary\" />\n        </IconButton>\n    </div>\n})\n","import React, { useCallback, useEffect } from 'react'\nimport { AddItemForm } from './components/AddItemForm/AddItemForm'\nimport { EditableSpan } from './components/EditableSpan/EditableSpan'\nimport { Button, IconButton } from '@material-ui/core'\nimport { Delete } from '@material-ui/icons'\nimport { Task } from './Task'\nimport { FilterValuesType } from './App';\nimport { TaskStatuses, TaskType } from './api/api'\nimport { useDispatch } from 'react-redux'\nimport { fetchTasksTC } from './state/tasks-reducer'\nimport { RequestStatusType } from './state/app-reducer'\n\ntype PropsType = {\n    id: string\n    title: string\n    tasks: Array<TaskType>\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\n    addTask: (title: string, todolistId: string) => void\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n    removeTask: (taskId: string, todolistId: string) => void\n    removeTodolist: (id: string) => void\n    changeTodolistTitle: (id: string, newTitle: string) => void\n    filter: FilterValuesType\n    entityStatus: RequestStatusType\n    demo?: boolean\n};\n\nexport const Todolist = React.memo(function (props: PropsType) {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (props.demo) {\n            return\n        }\n        const thunk = fetchTasksTC(props.id)\n        dispatch(thunk)\n    }, [])\n\n    const addTask = useCallback((title: string) => {\n        props.addTask(title, props.id)\n    }, [props.addTask, props.id]);\n\n    const removeTodolist = () => {\n        props.removeTodolist(props.id)\n    };\n    const changeTodolistTitle = useCallback((title: string) => {\n        props.changeTodolistTitle(props.id, title)\n    }, [props.id, props.changeTodolistTitle]);\n\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter]);\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter]);\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter]);\n\n\n    let tasksForTodolist = props.tasks;\n\n    if (props.filter === 'active') {\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\n    };\n    if (props.filter === 'completed') {\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\n    };\n\n    return <div>\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle} />\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\n                <Delete />\n            </IconButton>\n        </h3>\n        <AddItemForm addItem={addTask} entityStatus={props.entityStatus} />\n        <div>\n            {\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\n                    removeTask={props.removeTask}\n                    changeTaskTitle={props.changeTaskTitle}\n                    changeTaskStatus={props.changeTaskStatus}\n                />)\n            }\n        </div>\n        <div style={{ paddingTop: '10px', display: \"flex\", justifyContent: \"space-between\" }}>\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\n                onClick={onAllClickHandler}\n                color={'default'}\n            >All\n            </Button>\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\n                onClick={onActiveClickHandler}\n                color={'primary'}>Active\n            </Button>\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\n                onClick={onCompletedClickHandler}\n                color={'secondary'}>Completed\n            </Button>\n        </div>\n    </div >\n});\n\n\n","import { Grid, Paper } from \"@material-ui/core\"\nimport { useCallback, useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { Redirect } from \"react-router-dom\"\nimport { TaskStatuses } from \"./api/api\"\nimport { FilterValuesType, TasksStateType } from \"./App\"\nimport { AddItemForm } from \"./components/AddItemForm/AddItemForm\"\nimport { AppRootStateType } from \"./state/store\"\nimport { addTaskTC, changeTaskTitleTC, removeTasksTC, updateTaskStatusTC } from \"./state/tasks-reducer\"\nimport { addTodolistTC, changeTodolistFilterAC, changeTodolistTitleTC, removeTodolistTC, setTodolistTC, TodolistDomainType } from \"./state/todolists-reducer\"\nimport { Todolist } from \"./Todolist\"\nimport './App.css';\n\n\n//* demo - проверка для сторибука\ntype PropsType = {\n    demo?: boolean\n};\n\nexport const TodolistsList: React.FC<PropsType> = ({ demo = false }) => {\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn);\n    useEffect(() => {\n        if (demo || !isLoggedIn) {\n            return;\n        }\n        const thunk = setTodolistTC()\n        dispatch(thunk)\n    }, []);\n\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists);\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\n\n    const dispatch = useDispatch();\n\n    //todo TASKS FUNCTION\n    const removeTask = useCallback(function (id: string, todolistId: string) {\n        dispatch(removeTasksTC(todolistId, id))\n    }, []);\n\n    const addTask = useCallback(function (title: string, todolistId: string) {\n        dispatch(addTaskTC(todolistId, title))\n    }, []);\n\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\n        dispatch(updateTaskStatusTC(todolistId, id, status));\n    }, []);\n\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\n\n        dispatch(changeTaskTitleTC(todolistId, id, newTitle));\n    }, []);\n\n    //todo TODOLISTS FUNCTION\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\n        const action = changeTodolistFilterAC({ id: todolistId, filter: value });\n        dispatch(action);\n    }, []);\n\n    const removeTodolist = useCallback(function (id: string) {\n        dispatch(removeTodolistTC(id));\n    }, []);\n\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\n        dispatch(changeTodolistTitleTC(id, title));\n    }, []);\n\n    const addTodolist = useCallback((title: string) => {\n        dispatch(addTodolistTC(title));\n    }, [dispatch]);\n\n    if (!isLoggedIn) {\n        return <Redirect to={'/login'} />\n    } else {\n        return <>\n            <Grid container style={{ padding: \"20px\", justifyContent: \"center\" }} > \n                <div className=\"mainTitle\">Create New Todolist:</div>\n                <AddItemForm addItem={addTodolist} mainItem={true}/>\n            </Grid>\n            <Grid container spacing={3}>\n                {\n                    todolists.map(tl => {\n                        let allTodolistTasks = tasks[tl.id];\n\n                        return <Grid item key={tl.id} >\n                            <Paper style={{ padding: \"15px\" }} className=\"todolist\">\n                                <Todolist\n                                    id={tl.id}\n                                    title={tl.title}\n                                    tasks={allTodolistTasks}\n                                    filter={tl.filter}\n                                    entityStatus={tl.entityStatus}\n                                    removeTask={removeTask}\n                                    changeFilter={changeFilter}\n                                    addTask={addTask}\n                                    changeTaskStatus={changeStatus}\n                                    removeTodolist={removeTodolist}\n                                    changeTaskTitle={changeTaskTitle}\n                                    changeTodolistTitle={changeTodolistTitle}\n                                    demo={demo}\n                                />\n                            </Paper>\n                        </Grid>\n                    })\n                }\n            </Grid>\n        </>\n    }\n};","import { AppBar, Button, Toolbar, Typography, withStyles } from \"@material-ui/core\";\nimport { AddItemForm } from \"../AddItemForm/AddItemForm\";\n\ntype NewAppBarType = {\n    isLoggedIn: boolean, logoutHandler: () => void\n}\n\nconst NewAppBar = withStyles({\n    root: {\n        background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n        borderRadius: 3,\n        border: 0,\n        color: 'white',\n        height: 48,\n        padding: '0 30px',\n        boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n        minHeight: '60px',\n        position: 'relative',\n    },\n    label: {\n        textTransform: 'capitalize',\n    },\n})(AppBar);\n\nexport function CustomNewAppBar(props: NewAppBarType) {\n    return <NewAppBar position=\"static\" >\n        <Toolbar>\n            <Typography variant=\"h4\" style={{cursor:\"default\"}}>\n                Todolist\n            </Typography>\n           \n            {props.isLoggedIn && <Button color=\"inherit\" onClick={props.logoutHandler} style={{ position: \"absolute\", right: \"10px\", fontWeight: \"bold\", fontSize: \"16px\" }}>Logout</Button>}\n\n        </Toolbar>\n    </NewAppBar>\n}\n\n\n","import './App.css';\nimport { Container, LinearProgress, CircularProgress } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootStateType } from './state/store';\nimport { initializeAppTC, RequestStatusType } from './state/app-reducer';\nimport { ErrorSnackbar } from './components/ErrorSnackbar/ErrorSnackbar';\nimport { HashRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport { Login } from './features/Login/Login';\nimport { TodolistsList } from './TodolistsList';\nimport { TaskType } from './api/api';\nimport { useEffect } from 'react';\nimport { logoutTC } from './state/auth-reducer';\nimport ParticlesBg from 'particles-bg'\nimport { CustomNewAppBar } from './components/AppBar/AppBar';\n\n\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n};\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n};\n\n//* demo - проверка для сторибука\ntype PropsType = {\n    demo?: boolean\n};\n\nfunction App({ demo = false }: PropsType) {\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized);\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(initializeAppTC())\n\n    }, []);\n\n    const logoutHandler = () => {\n        dispatch(logoutTC())\n    };\n    if (!isInitialized) {\n        return <div\n            style={{ position: 'fixed', top: '30%', textAlign: 'center', width: '100%' }}>\n            <CircularProgress />\n        </div>\n    };\n\n    return (\n        <div className=\"App\">\n            <ParticlesBg type=\"polygon\" bg={true} />\n            <HashRouter>\n                <ErrorSnackbar />\n                <CustomNewAppBar isLoggedIn={isLoggedIn} logoutHandler={logoutHandler} />\n\n                {status === 'loading' && <LinearProgress color=\"secondary\" />}\n\n                <Container fixed>\n                    <Switch >\n                        <Route exact path={'/'} render={() => <TodolistsList demo={demo} />} />\n                        <Route path={'/login'} render={() => <Login />} />\n                        <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>} />\n                        <Redirect from={'*'} to={'/'} />\n                    </Switch>\n                </Container>\n            </HashRouter>\n        </div>\n    );\n};\n\nexport default App;\n","import { tasksReducer } from './tasks-reducer';\nimport { todolistsReducer } from './todolists-reducer';\nimport { combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport { appReducer } from './app-reducer';\nimport { authReducer } from './auth-reducer';\nimport { configureStore } from '@reduxjs/toolkit';\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer,\n    app: appReducer,\n    auth: authReducer\n});\n\n// непосредственно создаём store\n//export const store = createStore(rootReducer, applyMiddleware(thunk));\n\n//ReduxToolKit\nexport const store = configureStore({\n    reducer: rootReducer,\n    middleware: (getDefaultMiddleware) =>\n        getDefaultMiddleware()\n            .prepend(thunk)\n});\n\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './state/store';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}