{"version":3,"sources":["AddItemForm.tsx","EditabelSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addTask","trimmerTitle","trim","addItem","value","onChange","e","currentTarget","onKeyPress","key","className","onClick","EditableSpan","editMode","setEditMode","onBlur","changeTitle","autoFocus","onDoubleClick","Todolist","tasks","map","t","id","isDone","type","checked","changeTaskStatus","newTitle","changeTaskTitle","removeTask","changeTodolistTitle","removeTodolist","addTasks","changeFilter","filter","App","todoListID1","v1","todoListID2","todoLists","setTodolists","setTasks","taskID","todolistID","filterTasks","newTask","todolistTasks","changeStatus","newIsDone","task","find","todolistSingle","tl","TodolistComponents","tasksForTodolist","todolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6ff11a07.chunk.js","sourcesContent":["import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.key === \"Enter\") { addTask(); }\r\n    }\r\n    const addTask = () => {\r\n        const trimmerTitle = title.trim()\r\n        if (trimmerTitle) {\r\n            props.addItem(trimmerTitle);\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required!\")\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <input\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onKeyPressAddTask}\r\n                className={error ? \"error\" : \"\"} />\r\n            <button onClick={addTask}>+</button>\r\n            {error && <div className=\"errorMessage\">{error}</div>}\r\n        </div>\r\n    )\r\n}","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (newTitle: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    //режим редактирования\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    //локальный стейт для закидывания названия таски в инпут\r\n    let [title, setTitle] = useState(props.title);\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    }\r\nconst onEnter = (e:KeyboardEvent)=> {\r\n    if(e.key ==='Enter') {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n}\r\n    \r\n    const onEditMode = () => { setEditMode(true) };\r\n    const offEditMode = () => {\r\n        setEditMode(false);\r\n        props.changeTitle(title);// для сохранения изменений в таске\r\n    };\r\n    return (\r\n        editMode ? <input value={title} onChange={onChangeTitle} onBlur={offEditMode} autoFocus onKeyPress={onEnter} /> : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}","import React, { ChangeEvent } from 'react';\r\nimport { AddItemForm } from './AddItemForm';\r\nimport { EditableSpan } from './EditabelSpan';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type FilterType = \"all\" | \"active\" | \"complete\"\r\n\r\ntype TodolistPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterType\r\n    removeTask: (taskID: string, todolistID: string) => void\r\n    removeTodolist: (todolistID: string) => void\r\n    addTasks: (title: string, todolistID: string) => void\r\n    changeFilter: (value: FilterType, todolistID: string) => void\r\n    changeTaskStatus: (taskId: string, newIsDone: boolean, todolistID: string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todolistID: string) => void\r\n    changeTodolistTitle: (newTitle: string, todolistID: string) => void\r\n\r\n\r\n}\r\n\r\nexport function Todolist(props: TodolistPropsType) {\r\n    const setAllFilter = () => { props.changeFilter(\"all\", props.id) };\r\n    const setActiveFilter = () => { props.changeFilter(\"active\", props.id) };\r\n    const setCompleteFilter = () => { props.changeFilter(\"complete\", props.id) };\r\n\r\n    const tasks = props.tasks.map(\r\n        t => {\r\n            const remove = () => { props.removeTask(t.id, props.id) }\r\n            const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) =>\r\n                props.changeTaskStatus(t.id, e.currentTarget.checked, props.id);\r\n            const changeTaskTitle = (newTitle: string) => { props.changeTaskTitle(t.id, newTitle, props.id) }\r\n            return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                <input type=\"checkbox\"\r\n                    checked={t.isDone}\r\n                    onChange={changeTaskStatus} />\r\n                <EditableSpan title={t.title} changeTitle={changeTaskTitle} />\r\n                <button onClick={remove}>X</button>\r\n            </li>\r\n        }\r\n    )\r\n    const removeTodolist = () => { props.removeTodolist(props.id) };\r\n    const addTask = (title: string) => { props.addTasks(title, props.id) };\r\n    const changeTodolistTitle = (title: string) => { props.changeTodolistTitle(title, props.id) };\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} changeTitle={changeTodolistTitle} />\r\n                <button onClick={removeTodolist}>X</button></h3>\r\n            <AddItemForm addItem={addTask} />\r\n            <ul>\r\n                {tasks}\r\n            </ul>\r\n            <div>\r\n                <button onClick={setAllFilter} className={props.filter === 'all' ? \"active-filter\" : \"\"}>All</button>\r\n                <button onClick={setActiveFilter} className={props.filter === 'active' ? \"active-filter\" : \"\"}>Active</button>\r\n                <button onClick={setCompleteFilter} className={props.filter === 'complete' ? \"active-filter\" : \"\"}>Completed</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport { v1 } from 'uuid';\r\nimport { AddItemForm } from './AddItemForm';\r\nimport './App.css';\r\nimport { FilterType, Todolist, TaskType } from './Todolist';\r\n\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n}\r\ntype TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    //BLL\r\n    const todoListID1 = v1();\r\n    const todoListID2 = v1();\r\n    const [todoLists, setTodolists] = useState<Array<TodolistType>>(\r\n        [\r\n            { id: todoListID1, title: \"What to learn\", filter: \"all\" },\r\n            { id: todoListID2, title: \"What to buy\", filter: \"all\" },\r\n        ]\r\n    )\r\n    let [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoListID1]: [\r\n            { id: v1(), title: \"HTML&CSS\", isDone: true },\r\n            { id: v1(), title: \"JS\", isDone: true },\r\n            { id: v1(), title: \"React\", isDone: false },\r\n            { id: v1(), title: \"Git\", isDone: false },\r\n            { id: v1(), title: \"SCSS\", isDone: false }\r\n        ],\r\n        [todoListID2]: [\r\n            { id: v1(), title: \"Milk\", isDone: false },\r\n            { id: v1(), title: \"Bread\", isDone: true },\r\n            { id: v1(), title: \"EGGS\", isDone: false },\r\n            { id: v1(), title: \"Meat\", isDone: false },\r\n        ],\r\n\r\n    })\r\n\r\n\r\n    //Delete tasks\r\n    function removeTask(taskID: string, todolistID: string) {\r\n        const todolistTasks = tasks[todolistID]; //ищем в каком тудулисте таска\r\n        const filterTasks = todolistTasks.filter(t => t.id !== taskID);\r\n        tasks[todolistID] = filterTasks;\r\n        setTasks({ ...tasks })\r\n    }\r\n    //Add tasks from input\r\n    function addTask(title: string, todolistID: string) {\r\n        let newTask = { id: v1(), title: title, isDone: false }; // новая таска\r\n        const todolistTasks = tasks[todolistID];//ищем в каком тудулисте таска\r\n        tasks[todolistID] = [newTask, ...todolistTasks]\r\n        setTasks({ ...tasks })\r\n    }\r\n    //Change checkbox\r\n    function changeStatus(id: string, newIsDone: boolean, todolistID: string) {\r\n        const todolistTasks = tasks[todolistID];//ищем в каком тудулисте таска\r\n\r\n        const task = todolistTasks.find(t => t.id === id);\r\n        if (task) {\r\n            task.isDone = newIsDone;\r\n            setTasks({ ...tasks })\r\n        }\r\n    }\r\n    //Change text in tasks\r\n    function changeTaskTitle(id: string, newTitle: string, todolistID: string) {\r\n        const todolistTasks = tasks[todolistID];//ищем в каком тудулисте таска\r\n\r\n        const task = todolistTasks.find(t => t.id === id);\r\n        if (task) {\r\n            task.title = newTitle;\r\n            setTasks({ ...tasks })\r\n        }\r\n    }\r\n    //Filter tasks on buttons\r\n    function changeFilter(value: FilterType, todolistID: string) {\r\n        const todolistSingle = todoLists.find(tl => tl.id === todolistID)//ищем нужный тудулист\r\n        if (todolistSingle) { todolistSingle.filter = value }\r\n        setTodolists([...todoLists])\r\n    }\r\n    //Change text in title for todolist\r\n    function changeTodolistTitle(newTitle: string, todolistID: string) {\r\n        const todolistSingle = todoLists.find(tl => tl.id === todolistID)//ищем нужный тудулист\r\n        if (todolistSingle) { todolistSingle.title = newTitle }\r\n        setTodolists([...todoLists])\r\n    }\r\n    //Delete Todolist\r\n    function removeTodolist(todolistID: string) {\r\n        setTodolists(todoLists.filter(tl => tl.id !== todolistID))\r\n        delete tasks[todolistID]\r\n    }\r\n    const TodolistComponents = todoLists.map(tl => {\r\n        let tasksForTodolist = tasks[tl.id];\r\n        if (tl.filter === \"active\") { tasksForTodolist = tasksForTodolist.filter(t => t.isDone === false); }\r\n        if (tl.filter === \"complete\") { tasksForTodolist = tasksForTodolist.filter(t => t.isDone === true); }\r\n\r\n        return (\r\n            <Todolist\r\n                id={tl.id}\r\n                title={tl.title}\r\n                tasks={tasksForTodolist}\r\n                removeTask={removeTask}\r\n                changeFilter={changeFilter}\r\n                addTasks={addTask}\r\n                changeTaskStatus={changeStatus}\r\n                filter={tl.filter}\r\n                removeTodolist={removeTodolist}\r\n                changeTaskTitle={changeTaskTitle}\r\n                changeTodolistTitle={changeTodolistTitle}\r\n\r\n            />\r\n        )\r\n    })\r\n\r\n    function addTodolist(title: string) {\r\n        let todolist: TodolistType = {\r\n            id: v1(),\r\n            title: title,\r\n            filter: \"all\"\r\n        }\r\n        setTodolists([todolist, ...todoLists]);\r\n        setTasks({ ...tasks, [todolist.id]: [] })\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm addItem={addTodolist} />\r\n            {TodolistComponents}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}