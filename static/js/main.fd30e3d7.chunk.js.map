{"version":3,"sources":["Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todolist","props","useState","title","setTitle","error","setError","addTask","trim","addTasks","tasks","map","t","key","id","className","isDone","type","checked","onChange","e","changeTaskStatus","currentTarget","onClick","removeTask","value","onKeyPress","changeFilter","filter","App","v1","setTasks","setFilter","tasksForTodolist","filterTasks","newTasks","task","find","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.fd30e3d7.chunk.js","sourcesContent":["import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\ntype TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type FilterType = \"all\" | \"active\" | \"complete\"\r\n\r\ntype TodolistType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterType\r\n    removeTask: (id: string) => void\r\n    changeFilter: (value: FilterType) => void\r\n    addTasks: (title: string) => void\r\n    changeTaskStatus: (taskId: string, newIsDone: boolean) => void\r\n}\r\n\r\nexport function Todolist(props: TodolistType) {\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    let [error,setError] = useState<string | null>(null)\r\n    const addTask = () => {\r\n        const trimmerTitle = title.trim()\r\n        if (trimmerTitle) {\r\n            props.addTasks(title);\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required!\")\r\n        }\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.key === \"Enter\") { addTask(); }\r\n    }\r\n\r\n    const setAllFilter = () => { props.changeFilter(\"all\") };\r\n    const setActiveFilter = () => { props.changeFilter(\"active\") };\r\n    const setCompleteFilter = () => { props.changeFilter(\"complete\") };\r\n\r\n    const tasks = props.tasks.map(\r\n        t => {\r\n            const remove = () => { props.removeTask(t.id) }\r\n            const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) =>\r\n                props.changeTaskStatus(t.id, e.currentTarget.checked)\r\n            return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                <input type=\"checkbox\"\r\n                    checked={t.isDone}\r\n                    onChange={changeTaskStatus} />\r\n                <span>{t.title}</span>\r\n                <button onClick={remove}>X</button>\r\n            </li>\r\n        }\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <h3>{props.title}</h3>\r\n            <div>\r\n                <input\r\n                    value={title}\r\n                    onChange={onChangeTitle}\r\n                    onKeyPress={onKeyPressAddTask} \r\n                    className={error? \"error\" : \"\"}/>\r\n                <button onClick={addTask}>+</button>\r\n                {error && <div className= \"errorMessage\">{error}</div>}\r\n            </div>\r\n            <ul>\r\n                {tasks}\r\n            </ul>\r\n            <div>\r\n                <button onClick={setAllFilter} className={props.filter === 'all' ? \"active-filter\" : \"\"}>All</button>\r\n                <button onClick={setActiveFilter} className={props.filter === 'active' ? \"active-filter\" : \"\"}>Active</button>\r\n                <button onClick={setCompleteFilter} className={props.filter === 'complete' ? \"active-filter\" : \"\"}>Completed</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { title } from 'node:process';\r\nimport React, { useState } from 'react';\r\nimport { v1 } from 'uuid';\r\nimport './App.css';\r\nimport { FilterType, Todolist } from './Todolist';\r\n\r\nfunction App() {\r\n    let [tasks, setTasks] = useState([\r\n        { id: v1(), title: \"HTML&CSS\", isDone: true },\r\n        { id: v1(), title: \"JS\", isDone: true },\r\n        { id: v1(), title: \"React\", isDone: false },\r\n        { id: v1(), title: \"Git\", isDone: false },\r\n        { id: v1(), title: \"SCSS\", isDone: false }\r\n    ])\r\n\r\n    //Delete tasks\r\n    function removeTask(id: string) {\r\n        let filterTasks = tasks.filter(t => t.id != id);\r\n        setTasks(filterTasks)\r\n    }\r\n\r\n    //Filter tasks on buttons\r\n    let [filter, setFilter] = useState<FilterType>(\"all\");\r\n    let tasksForTodolist = tasks;\r\n    if (filter === \"active\") { tasksForTodolist = tasks.filter(t => t.isDone === false); }\r\n    if (filter === \"complete\") { tasksForTodolist = tasks.filter(t => t.isDone === true); }\r\n    function changeFilter(value: FilterType) {\r\n        setFilter(value);\r\n    }\r\n\r\n    //Add tasks from input\r\n    function addTask(title: string) {\r\n        let task = { id: v1(), title: title, isDone: false };\r\n        let newTasks = [task, ...tasks];\r\n        setTasks(newTasks)\r\n    }\r\n\r\n    //Change checkbox\r\n    function changeStatus(id: string, isDone: boolean) {\r\n        let task = tasks.find(t => t.id === id);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasks([...tasks]);\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <Todolist\r\n                title=\"What tot learn\"\r\n                tasks={tasksForTodolist}\r\n                removeTask={removeTask}\r\n                changeFilter={changeFilter}\r\n                addTasks={addTask}\r\n                changeTaskStatus={changeStatus}\r\n                filter={filter}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}